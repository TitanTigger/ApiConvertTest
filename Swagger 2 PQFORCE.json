{
	"swagger": "2.0",
	"info": {
		"version": "4.07.1",
		"title": "PQFORCE",
		"description": "PQFORCE REST API, fingerprint: VXD2-U7PR-E6K6-VTCQ-SXWW-FQM5-LLCM-HJYV",
		"contact": {}
	},
	"host": "www.example.com",
	"basePath": "/",
	"securityDefinitions": {},
	"schemes": [
		"https"
	],
	"consumes": [
		"application/json"
	],
	"produces": [
		"application/json"
	],
	"paths": {
		"/API/V2/ACM/ApiToken/Create": {
			"post": {
				"description": "API V2 authentication Step 1: Get new API token if no valid key present",
				"summary": "acm.createNewApiToken",
				"operationId": "acm.createNewApiToken",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "tenantalias",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The alias of the tenant"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/acm.ApiClientInfo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.ApiTokenWithAuthUrl"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.ApiTokenWithAuthUrl"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.ApiTokenWithAuthUrl"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/ACM/AuthenticationState": {
			"get": {
				"description": "Returns information about the current authentication state",
				"summary": "acm.getAuthenticationState",
				"operationId": "acm.getAuthenticationState",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.AuthenticationState"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.AuthenticationState"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.AuthenticationState"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/ACM/CurrentUser": {
			"get": {
				"description": "Returns the user currently logged in (HTTP code 401 indicates that no user is logged in)",
				"summary": "acm.getCurrentUser",
				"operationId": "acm.getCurrentUser",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Authorizations": {
			"get": {
				"description": "Returns all authorizations of the current user",
				"summary": "acm.getCurrentUserAuthorizations",
				"operationId": "acm.getCurrentUserAuthorizations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserAuthorization"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserAuthorization"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserAuthorization"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Authorizations/{objectType}/{objectId}": {
			"get": {
				"description": "Returns the current user's authorizations for a transition or an action on a given object",
				"summary": "acm.getAuthorizationByObj",
				"operationId": "acm.getAuthorizationByObj",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The object's type"
					},
					{
						"name": "objectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The object's ID"
					},
					{
						"name": "action",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The action to be performed (specify either action or transition)"
					},
					{
						"name": "transition",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The transition to be performed (specify either action or transition)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Authorization"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Authorization"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Authorization"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Authorizations/{permissionId}": {
			"get": {
				"description": "Returns the current user's authorization for a given permission",
				"summary": "acm.getAuthorizationByPerm",
				"operationId": "acm.getAuthorizationByPerm",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "permissionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The permission ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.UserAuthorization"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.UserAuthorization"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.UserAuthorization"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Certificate": {
			"get": {
				"description": "Requests a user certificate for usage with other PQFORCE components",
				"summary": "acm.getUserCertificate",
				"operationId": "acm.getUserCertificate",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.UserCertificate"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.UserCertificate"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.UserCertificate"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Certificate/Binary": {
			"get": {
				"description": "Requests a user certificate for usage with other PQFORCE components",
				"summary": "acm.getUserCertificateBinary",
				"operationId": "acm.getUserCertificateBinary",
				"deprecated": false,
				"produces": [
					"application/octet-stream"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "string",
							"default": "",
							"format": "binary"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "string",
							"default": "",
							"format": "binary"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "string",
							"default": "",
							"format": "binary"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Preferences": {
			"get": {
				"description": "Returns the current user preferences, not specified fields are transmitted as null or filled with default / current value depending on optional parameter",
				"summary": "acm.getCurrentUserPreferences",
				"operationId": "acm.getCurrentUserPreferences",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "allowunspecified",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "return not specified values as null, if set"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.UserPreferences"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.UserPreferences"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.UserPreferences"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores the current user preferences, defaults, if none set",
				"summary": "acm.putCurrentUserPreferences",
				"operationId": "acm.putCurrentUserPreferences",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/acm.UserPreferences"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/CurrentUser/Relations": {
			"get": {
				"description": "Returns the relations of the user currently logged in",
				"summary": "acm.getCurrentUserRelations",
				"operationId": "acm.getCurrentUserRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "targetType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Optional filtering by target type (needs also targetId)"
					},
					{
						"name": "targetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Optional filtering by target id (needs also targetType)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/FirstFactorAuthorities": {
			"get": {
				"description": "Returns all first factor authorities",
				"summary": "acm.getFirstFactorAuthorities",
				"operationId": "acm.getFirstFactorAuthorities",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The language for communication (will be included into login URL)"
					},
					{
						"name": "timezone",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The user's timezone (will be included into login URL)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.FirstFactorAuthority"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.FirstFactorAuthority"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.FirstFactorAuthority"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/FirstFactorAuthority/{authorityId}": {
			"get": {
				"description": "Returns all first factor authorities",
				"summary": "acm.getFirstFactorAuthority",
				"operationId": "acm.getFirstFactorAuthority",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "authorityId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the ID of the authority"
					},
					{
						"name": "lang",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The language for communication (will be included into login URL)"
					},
					{
						"name": "timezone",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The user's timezone (will be included into login URL)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.FirstFactorAuthority"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.FirstFactorAuthority"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.FirstFactorAuthority"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Permission/{permissionId}": {
			"get": {
				"description": "Returns a specific permission",
				"summary": "acm.getPermission",
				"operationId": "acm.getPermission",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "permissionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The permission ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.Permission"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.Permission"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.Permission"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/PermissionCube/{objectType}": {
			"get": {
				"description": "Returns a permission cube for a given object type that describes which user roles may access which objects in what manner",
				"summary": "acm.getPermissionCubeForType",
				"operationId": "acm.getPermissionCubeForType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "includenoncore",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include permissions with wildcards"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.CubeViewForType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.CubeViewForType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.CubeViewForType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/PermissionCube/{objectType}/{objectId}": {
			"get": {
				"description": "Returns a permission cube for a given object that describes which users may access it in what manner",
				"summary": "acm.getPermissionCubeForId",
				"operationId": "acm.getPermissionCubeForId",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object"
					},
					{
						"name": "objectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					},
					{
						"name": "includenoncore",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include permissions with wildcards"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.CubeViewForId"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.CubeViewForId"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.CubeViewForId"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/PermissionCubeMappings/{objectType}": {
			"get": {
				"description": "Returns a mapping between actions or transitions on an object and the corresponding permissions",
				"summary": "acm.getPermissionCubeMappingsForType",
				"operationId": "acm.getPermissionCubeMappingsForType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "includenoncore",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include permissions with wildcards"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.CubeMappingForType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.CubeMappingForType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.CubeMappingForType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/PermissionGraph": {
			"get": {
				"description": "Returns a permission graph that describes the inheritance between permissions (directed acyclic graph)",
				"summary": "acm.getPermissionsGraph",
				"operationId": "acm.getPermissionsGraph",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.PermissionWithParents"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.PermissionWithParents"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.PermissionWithParents"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Permissions": {
			"get": {
				"description": "Returns all permissions available on the system",
				"summary": "acm.getPermissions",
				"operationId": "acm.getPermissions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.Permission"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.Permission"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.Permission"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Saml2/Idp/{authid}": {
			"get": {
				"description": "Gets a SAML 2 identity provider specified by its ID",
				"summary": "acm.getSaml2IdentityProvider",
				"operationId": "acm.getSaml2IdentityProvider",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "authid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The SAML 2 identity provider's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.Saml2IdentityProvider"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.Saml2IdentityProvider"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.Saml2IdentityProvider"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "acm.putSaml2IdentityProvider",
				"operationId": "acm.putSaml2IdentityProvider",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "authid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The SAML 2 identity provider's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/acm.Saml2IdentityProvider"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a SAML 2 identity provider specified by its ID",
				"summary": "acm.delSaml2IdentityProvider",
				"operationId": "acm.delSaml2IdentityProvider",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "authid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The SAML 2 identity provider's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Saml2/Idps": {
			"get": {
				"description": "Gets all SAML 2 identity providers",
				"summary": "acm.getSaml2IdentityProviders",
				"operationId": "acm.getSaml2IdentityProviders",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.Saml2IdentityProvider"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.Saml2IdentityProvider"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.Saml2IdentityProvider"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Saml2/Idps/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "acm.addSaml2IdentityProvider",
				"operationId": "acm.addSaml2IdentityProvider",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Saml2/Issuer": {
			"get": {
				"description": "SAML 2 issuer URL",
				"summary": "acm.getSaml2Issuer",
				"operationId": "acm.getSaml2Issuer",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/ACM/SecondFactorAuthorities": {
			"get": {
				"description": "Returns all second factor authorities",
				"summary": "acm.getSecondFactorAuthorities",
				"operationId": "acm.getSecondFactorAuthorities",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/SecondFactorAuthority/{authorityId}": {
			"get": {
				"description": "Returns all second factor authorities",
				"summary": "acm.getSecondFactorAuthority",
				"operationId": "acm.getSecondFactorAuthority",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "authorityId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the ID of the authority"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/User/{userId}": {
			"get": {
				"description": "Returns a specific user",
				"summary": "acm.getUser",
				"operationId": "acm.getUser",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates or creates a specific user",
				"summary": "acm.putUser",
				"operationId": "acm.putUser",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/acm.User"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a specific user",
				"summary": "acm.delUser",
				"operationId": "acm.delUser",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/User/{userId}/Authorizations": {
			"get": {
				"description": "Returns all authorizations of a specific user",
				"summary": "acm.getUserAuthorizations",
				"operationId": "acm.getUserAuthorizations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserAuthorization"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserAuthorization"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserAuthorization"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/User/{userId}/Identification": {
			"get": {
				"description": "Returns a specific user's identification",
				"summary": "acm.getUserIdentification",
				"operationId": "acm.getUserIdentification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/User/{userId}/Relations": {
			"get": {
				"description": "Returns the relations of the specified user",
				"summary": "acm.getUserRelations",
				"operationId": "acm.getUserRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					},
					{
						"name": "targetType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Optional filtering by target type (needs also targetId)"
					},
					{
						"name": "targetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Optional filtering by target id (needs also targetType)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/User/{userId}/Roles": {
			"get": {
				"description": "Returns the user roles assigned to a specific user",
				"summary": "acm.getUserRoleAssignments",
				"operationId": "acm.getUserRoleAssignments",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates the user roles assignments of a specific user",
				"summary": "acm.putUserRoleAssignments",
				"operationId": "acm.putUserRoleAssignments",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/User/{userId}/SecondFactor/Status": {
			"get": {
				"description": "Returns the status of the second factor of the two factor authentication",
				"summary": "acm.getUserSecondFactorStatus",
				"operationId": "acm.getUserSecondFactorStatus",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The user's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/UserRole/{userRoleId}": {
			"get": {
				"description": "Returns a specific role that may be assigned to a user",
				"summary": "acm.getUserRole",
				"operationId": "acm.getUserRole",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userRoleId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the user role ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.UserRole"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.UserRole"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.UserRole"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/UserRole/{userRoleId}/Authorizations": {
			"get": {
				"description": "Returns the authorizations of a specific role that may be assigned to a user",
				"summary": "acm.getUserRoleAuthorizations",
				"operationId": "acm.getUserRoleAuthorizations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userRoleId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the user role ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRoleAuthorization"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRoleAuthorization"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRoleAuthorization"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates the authorizations of a specific role that may be assigned to a user",
				"summary": "acm.putUserRoleAuthorizations",
				"operationId": "acm.putUserRoleAuthorizations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "userRoleId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the user role ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/acm.UserRoleAuthorization"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/UserRoles": {
			"get": {
				"description": "Returns all roles that may be assigned to a user",
				"summary": "acm.getUserRoles",
				"operationId": "acm.getUserRoles",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.UserRole"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Users": {
			"get": {
				"description": "Returns a list of users, filtered according to optional parameters (skipped if empty)",
				"summary": "acm.getUsers",
				"operationId": "acm.getUsers",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "filter by user name"
					},
					{
						"name": "resourceId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "filter by ID of connected resource"
					},
					{
						"name": "firstAuthorityId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "filter by ID of first authority"
					},
					{
						"name": "email",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "filter by email address"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.User"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.User"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/acm.User"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Users/Add/{firstAuthority}": {
			"post": {
				"description": "Creates a new user with specified first authority",
				"summary": "acm.addUser",
				"operationId": "acm.addUser",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "firstAuthority",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the user's first authority"
					},
					{
						"name": "resourceid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "ID of a resource connected to user"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.User"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACM/Welcome": {
			"get": {
				"description": "Returns a welcome message. This message may just welcome a user or may inform about special things like expiring passwords",
				"summary": "acm.getWelcomeMessage",
				"operationId": "acm.getWelcomeMessage",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/acm.WelcomeMessage"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/acm.WelcomeMessage"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/acm.WelcomeMessage"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/ActualsPeriod": {
			"get": {
				"description": "Returns the actuals period for a given date",
				"summary": "act.getActualsPeriodByDay",
				"operationId": "act.getActualsPeriodByDay",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "day",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day for which the actuals period should be retrieved"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ActualsPeriod"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ActualsPeriod"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ActualsPeriod"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/ActualsPeriod/{periodId}": {
			"get": {
				"description": "Returns the actuals period with given ID",
				"summary": "act.getActualsPeriod",
				"operationId": "act.getActualsPeriod",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "periodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The actuals period's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ActualsPeriod"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ActualsPeriod"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ActualsPeriod"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/ActualsPeriods": {
			"get": {
				"description": "Returns all actuals periods",
				"summary": "act.getActualsPeriods",
				"operationId": "act.getActualsPeriods",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ActualsPeriod"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ActualsPeriod"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ActualsPeriod"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/AbsenceBalance/{year}": {
			"get": {
				"description": "Returns the absence balance for a given resource in a given year",
				"summary": "act.getAbsencesBalance",
				"operationId": "act.getAbsencesBalance",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "year",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32",
						"description": "The absence balance's year"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceAbsence"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceAbsence"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceAbsence"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ActualsPeriod": {
			"get": {
				"description": "Returns the actuals period for a given resource and a given date",
				"summary": "act.getResourceActualsPeriodByDay",
				"operationId": "act.getResourceActualsPeriodByDay",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day for which the actuals period should be retrieved"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ResourceActualsPeriod"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ResourceActualsPeriod"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ResourceActualsPeriod"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ActualsPeriod/{periodId}": {
			"get": {
				"description": "Returns the actuals period for a given resource and with given ID",
				"summary": "act.getResourceActualsPeriod",
				"operationId": "act.getResourceActualsPeriod",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "periodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The actuals period's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ResourceActualsPeriod"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ResourceActualsPeriod"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ResourceActualsPeriod"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ActualsPeriod/{periodId}/Presences": {
			"get": {
				"description": "Returns presences of a given resource in a given period",
				"summary": "act.getResourcePresences",
				"operationId": "act.getResourcePresences",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "periodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The actuals period's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourcePresence"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourcePresence"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourcePresence"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ActualsPeriod/{periodId}/ProjectTimes": {
			"get": {
				"description": "Returns project time actuals of a given resource in a given period",
				"summary": "act.getResourceProjectTimes",
				"operationId": "act.getResourceProjectTimes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "periodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The actuals period's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ProjectTime"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ProjectTime"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ProjectTime"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ActualsPeriods": {
			"get": {
				"description": "Returns all actuals periods for a given resource",
				"summary": "act.getResourceActualsPeriods",
				"operationId": "act.getResourceActualsPeriods",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceActualsPeriod"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceActualsPeriod"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceActualsPeriod"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/DaySummary": {
			"get": {
				"description": "Returns the day summary for a given resource in a given time range",
				"summary": "act.getDaySummary",
				"operationId": "act.getDaySummary",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "Start date"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "End date"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceDaySummary"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceDaySummary"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceDaySummary"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/Efforts/Project/{projectid}": {
			"get": {
				"description": "Returns the efforts (plan/actual/remaining) for given resource in a given project",
				"summary": "act.getProjectEfforts",
				"operationId": "act.getProjectEfforts",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "projectid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ProjectEfforts"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ProjectEfforts"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ProjectEfforts"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/Efforts/ProjectWithPhases/{projectid}": {
			"get": {
				"description": "Returns the efforts (plan/actual/remaining) for a given resource in a given project, detailed down to phases",
				"summary": "act.getProjectWithPhasesEfforts",
				"operationId": "act.getProjectWithPhasesEfforts",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "projectid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ProjectWithPhasesEfforts"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ProjectWithPhasesEfforts"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ProjectWithPhasesEfforts"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/MidMonthSummary": {
			"get": {
				"description": "Returns the summary of the month until the specified day (inclusive) for a given resource",
				"summary": "act.getMidMonthSummary",
				"operationId": "act.getMidMonthSummary",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "target",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "Target date for mid month summary (inclusive)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ResourceDaySummary"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ResourceDaySummary"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ResourceDaySummary"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/Presence/Add": {
			"post": {
				"description": "Adds a presence for a given resource",
				"summary": "act.addResourcePresence",
				"operationId": "act.addResourcePresence",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/act.ResourcePresence"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/Presence/Clock/{time}": {
			"post": {
				"description": "Clocks in/out a presence for a given resource",
				"summary": "act.clockResourcePresence",
				"operationId": "act.clockResourcePresence",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "time",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date-time",
						"description": "The time of clocking in/out"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/Presence/{id}": {
			"put": {
				"description": "Modifies a presence for a given resource and with given ID",
				"summary": "act.putResourcePresence",
				"operationId": "act.putResourcePresence",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource presence's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/act.ResourcePresence"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a presence for a given resource and with given ID",
				"summary": "act.delResourcePresence",
				"operationId": "act.delResourcePresence",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource presence's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ProjectTime/{day}/{projectId}": {
			"get": {
				"description": "Returns a project time record for a given resource and a given project (no work item) on a given day",
				"summary": "act.getResourceProjectTime",
				"operationId": "act.getResourceProjectTime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The day"
					},
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores a project time record for a given resource and a given project (no work item) on a given day",
				"summary": "act.putResourceProjectTime",
				"operationId": "act.putResourceProjectTime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The day"
					},
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project time record for a given resource and a given project (no work item) on a given day",
				"summary": "act.delResourceProjectTime",
				"operationId": "act.delResourceProjectTime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The day"
					},
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/ProjectTime/{day}/{projectId}/{workItemId}": {
			"get": {
				"description": "Returns a project time record for a given resource and a given project and work item on a given day",
				"summary": "act.getResourceProjectPhaseTime",
				"operationId": "act.getResourceProjectPhaseTime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The day"
					},
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores a project time record for a given resource and a given project and work item on a given day",
				"summary": "act.putResourceProjectPhaseTime",
				"operationId": "act.putResourceProjectPhaseTime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The day"
					},
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/act.ProjectTime"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project time record for a given resource and a given project and work item on a given day",
				"summary": "act.delResourceProjectPhaseTime",
				"operationId": "act.delResourceProjectPhaseTime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "day",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The day"
					},
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/TimeBalance/{year}": {
			"get": {
				"description": "Returns the time balance for a given resource and a given year",
				"summary": "act.getTimeBalance",
				"operationId": "act.getTimeBalance",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "year",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32",
						"description": "The time balance's year"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/act.TimeBalance"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/act.TimeBalance"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/act.TimeBalance"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/TimeCorrection/{type}/{date}": {
			"put": {
				"description": "Modifies a time correction for a given resource on a given period and type",
				"summary": "act.putResourceTimeCorrection",
				"operationId": "act.putResourceTimeCorrection",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type"
					},
					{
						"name": "date",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The time correction's date"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/act.ResourceTimeCorrection"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a time correction for a given resource on a given period and type",
				"summary": "act.delResourceTimeCorrection",
				"operationId": "act.delResourceTimeCorrection",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type"
					},
					{
						"name": "date",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The time correction's date"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ACT/Resource/{resourceId}/TimeCorrections": {
			"get": {
				"description": "Returns the time corrections for a given resource",
				"summary": "act.getResourceTimeCorrections",
				"operationId": "act.getResourceTimeCorrections",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceTimeCorrection"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceTimeCorrection"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/act.ResourceTimeCorrection"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/AbsenceSlots/ByResource/{resourceId}": {
			"get": {
				"description": "Returns reservations",
				"summary": "alc.getAbsenceSlots",
				"operationId": "alc.getAbsenceSlots",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/AbsenceSlots/ByResource/{resourceId}/Update": {
			"post": {
				"description": "Updates absence slots",
				"summary": "alc.updateAbsenceSlots",
				"operationId": "alc.updateAbsenceSlots",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/AbsenceType/{absenceTypeId}": {
			"get": {
				"description": "Returns a specific absence type",
				"summary": "alc.getAbsenceType",
				"operationId": "alc.getAbsenceType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "absenceTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The absence type to be returned"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.AbsenceType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.AbsenceType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.AbsenceType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/AbsenceTypes": {
			"get": {
				"description": "Returns all absence types",
				"summary": "alc.getAbsenceTypes",
				"operationId": "alc.getAbsenceTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.AbsenceType"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.AbsenceType"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.AbsenceType"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/MacroAllocationHistory/ByResource/{resourceId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "alc.getMacroAllocationHistory",
				"operationId": "alc.getMacroAllocationHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					},
					{
						"name": "until",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "The point in time until which to get history"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.AllocationHistory"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.AllocationHistory"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.AllocationHistory"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/MacroAllocationSlot/ByResource/{resourceId}": {
			"get": {
				"description": "Returns one single macro allocation slot for a given time span",
				"summary": "alc.getMacroAllocationSlot",
				"operationId": "alc.getMacroAllocationSlot",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					},
					{
						"name": "projectId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the project that should be measured separately"
					},
					{
						"name": "scenarioId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the scenario that should be measured separately"
					},
					{
						"name": "groupBy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Defines how the time forecasts should be grouped"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination currency (optional, use home currency if not specified)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.Workload"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.Workload"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.Workload"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/MacroAllocationSlots/ByResource/{resourceId}": {
			"get": {
				"description": "Returns one single macro allocation slot for a given time span",
				"summary": "alc.getMacroAllocationSlots",
				"operationId": "alc.getMacroAllocationSlots",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					},
					{
						"name": "zoom",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The time units for the slots (required)"
					},
					{
						"name": "projectId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the project that should be measured separately"
					},
					{
						"name": "scenarioId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the scenario that should be measured separately"
					},
					{
						"name": "groupBy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Defines how the time forecasts should be grouped"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination currency (optional, use home currency if not specified)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.Workload"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.Workload"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.Workload"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/MicroAllocationSlots/ByResource/{resourceId}": {
			"get": {
				"description": "Returns reservations",
				"summary": "alc.getMicroAllocationSlots",
				"operationId": "alc.getMicroAllocationSlots",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/MicroAllocationSlots/ByResource/{resourceId}/Update": {
			"post": {
				"description": "Updates absence slots",
				"summary": "alc.updateMicroAllocationSlots",
				"operationId": "alc.updateMicroAllocationSlots",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/PlanningSlots/ByResource/{resourceId}": {
			"get": {
				"description": "Returns reservations and absences",
				"summary": "alc.getPlanningSlots",
				"operationId": "alc.getPlanningSlots",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.Planning"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/PlanningSlotStats/ByResource/{resourceId}": {
			"get": {
				"description": "Returns reservations and absences statistics",
				"summary": "alc.getPlanningSlotStats",
				"operationId": "alc.getPlanningSlotStats",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.MicroAllocationStatistics"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.MicroAllocationStatistics"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.MicroAllocationStatistics"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/Project/{projectId}/PhaseAllocations": {
			"get": {
				"description": "Returns all allocations on the active scenario of a project including actuals of a resource grouped by project work item",
				"summary": "alc.getProjectPhaseAllocations",
				"operationId": "alc.getProjectPhaseAllocations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/Project/{projectId}/PhaseAllocations/ByResource/{resourceId}": {
			"get": {
				"description": "Returns all allocations on the active scenario of a project including actuals of a resource grouped by project work item",
				"summary": "alc.getProjectPhaseAllocationsByResource",
				"operationId": "alc.getProjectPhaseAllocationsByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/Project/{projectId}/ResourcesInvolved": {
			"get": {
				"description": "Return all resources that are involved into a project (by allocation or reported actuals)",
				"summary": "alc.getInvolvedResources",
				"operationId": "alc.getInvolvedResources",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/ProjectAllocations/ByResource/{resourceId}": {
			"get": {
				"description": "Returns all allocations of a resource in a given time range",
				"summary": "alc.getProjectAllocationsByResource",
				"operationId": "alc.getProjectAllocationsByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					},
					{
						"name": "includeInactive",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also inactive allocations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.ProjectAllocations"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.ProjectAllocations"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.ProjectAllocations"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/ProjectAndPhaseAllocations/ByResource/{resourceId}": {
			"get": {
				"description": "Returns all allocations of a resource in a given time range",
				"summary": "alc.getProjectAndPhaseAllocationsByResource",
				"operationId": "alc.getProjectAndPhaseAllocationsByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.MacroAllocationStructure"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.MacroAllocationStructure"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.MacroAllocationStructure"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/ProjectScenario/{scenarioId}/PhaseAllocations": {
			"get": {
				"description": "Returns all allocations on the active scenario of a project including actuals of a resource grouped by project work item",
				"summary": "alc.getScenarioPhaseAllocations",
				"operationId": "alc.getScenarioPhaseAllocations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/ProjectScenario/{scenarioId}/PhaseAllocations/ByResource/{resourceId}": {
			"get": {
				"description": "Returns all allocations on the active scenario of a project including actuals of a resource grouped by project work item",
				"summary": "alc.getScenarioPhaseAllocationsByResource",
				"operationId": "alc.getScenarioPhaseAllocationsByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/alc.ProjectWorkItemAllocations"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/Resource/{resourceId}/ProjectsInvolved": {
			"get": {
				"description": "Return all projects that a resource is involved into (by allocation or reported actuals)",
				"summary": "alc.getInvolvedProjects",
				"operationId": "alc.getInvolvedProjects",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/ALC/UnoptimizedResources/ByParent/{resourceId}": {
			"get": {
				"description": "Returns unoptimized resources that are descendants of a specific resource",
				"summary": "alc.getUnoptimizedResourcesByParent",
				"operationId": "alc.getUnoptimizedResourcesByParent",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The start of the time span (inclusive, required)"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The end of the time span (exclusive, required)"
					},
					{
						"name": "count",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "The maximum number of resources to return"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ReferenceFactor"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ReferenceFactor"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ReferenceFactor"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CHT/Chart/{baseline}/{baselinefilter}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "cht.getChart",
				"operationId": "cht.getChart",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "baseline",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The baseline (x axis)"
					},
					{
						"name": "baselinefilter",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The filter for the baseline values"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/cht.Chart"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/cht.Chart"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/cht.Chart"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CHT/MetaModel": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "cht.getChartMetaModel",
				"operationId": "cht.getChartMetaModel",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/cht.ChartModel"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/cht.ChartModel"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/cht.ChartModel"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CLF/GlobalStore/{storeId}": {
			"get": {
				"description": "Retrieves some arbitrary JSON value previously stored in a global store",
				"summary": "clf.getGlobalStore",
				"operationId": "clf.getGlobalStore",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired global store"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores some arbitrary JSON value in a global store",
				"summary": "clf.putGlobalStore",
				"operationId": "clf.putGlobalStore",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired global store"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a previously stored JSON value from a global store",
				"summary": "clf.delGlobalStore",
				"operationId": "clf.delGlobalStore",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired global store"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CLF/TranslationOverrides/{lang}": {
			"get": {
				"description": "Get customized translations for certain terms",
				"summary": "clf.getTranslationOverrides",
				"operationId": "clf.getTranslationOverrides",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "lang",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the desired language"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CLF/UserStore/{storeId}": {
			"get": {
				"description": "Retrieves some arbitrary JSON value previously stored in a user dependent store",
				"summary": "clf.getUserStore",
				"operationId": "clf.getUserStore",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired user store"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores some arbitrary JSON value in a user dependent store",
				"summary": "clf.putUserStore",
				"operationId": "clf.putUserStore",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired user store"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a previously stored JSON value from a user dependent store",
				"summary": "clf.delUserStore",
				"operationId": "clf.delUserStore",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "storeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired user store"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CLF/Uuid/New/{count}": {
			"get": {
				"description": "Return new Universally Unique Identifiers (UUIDs)",
				"summary": "clf.newUuids",
				"operationId": "clf.newUuids",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "count",
						"in": "path",
						"required": true,
						"type": "integer",
						"format": "int32",
						"description": "The number of new UUIDs to return"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/clf.UuidArray"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/clf.UuidArray"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/clf.UuidArray"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CLS/ClassificationSchema/{schemaId}": {
			"get": {
				"description": "Get a specific classification schema by its ID",
				"summary": "cls.getSchema",
				"operationId": "cls.getSchema",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "schemaId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the classification schema's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/cls.ClassificationSchema"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/cls.ClassificationSchema"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/cls.ClassificationSchema"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/CLS/ObjectType/{typeId}/ClassificationSchemas": {
			"get": {
				"description": "Get a all classification schemas for a given object type",
				"summary": "cls.getSchemasForType",
				"operationId": "cls.getSchemasForType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the object's type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/cls.ClassificationSchema"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/cls.ClassificationSchema"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/cls.ClassificationSchema"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/AvailableExports/{view}": {
			"get": {
				"description": "Get all available exports",
				"summary": "doc.getAvailableExports",
				"operationId": "doc.getAvailableExports",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "view",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "View to be exported"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.AvailableExport"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.AvailableExport"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.AvailableExport"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/Export": {
			"post": {
				"description": "Create export data and final output file",
				"summary": "doc.handleExportRequest",
				"operationId": "doc.handleExportRequest",
				"deprecated": false,
				"produces": [
					"produces"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination currency (optional, use home currency if not specified)"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/doc.ExportRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/ExportViewConfiguration/{id}": {
			"put": {
				"description": "Stores a view configuration",
				"summary": "doc.putExportConfiguration",
				"operationId": "doc.putExportConfiguration",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the configuration"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/doc.ExportConfigurationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/ExportViewConfiguration/{view}": {
			"get": {
				"description": "Get the export configuration for specific view",
				"summary": "doc.getExportConfiguration",
				"operationId": "doc.getExportConfiguration",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "view",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "View type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.ExportViewConfiguration"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.ExportViewConfiguration"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.ExportViewConfiguration"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/ExportViewConfiguration/{view}/{id}": {
			"delete": {
				"description": "Remove a export configuration with the specific id",
				"summary": "doc.delExportConfiguration",
				"operationId": "doc.delExportConfiguration",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "view",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "view type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the configuration"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/Templates/{exportType}": {
			"get": {
				"description": "Get all available templates",
				"summary": "doc.getTemplates",
				"operationId": "doc.getTemplates",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "exportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Type of the output file (DOCUMENT,SPREADSHEET,IMAGE)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.ExportTemplate"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.ExportTemplate"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/doc.ExportTemplate"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DOC/Templates/{id}": {
			"put": {
				"description": "Stores an export template",
				"summary": "doc.putExportTemplate",
				"operationId": "doc.putExportTemplate",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the template"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/doc.ExportTemplate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Remove an export template",
				"summary": "doc.delExportTemplate",
				"operationId": "doc.delExportTemplate",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the template"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}": {
			"get": {
				"description": "Gets a disposition with a date range",
				"summary": "dpo.getDispoByResource",
				"operationId": "dpo.getDispoByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "Begin date of the dispo view"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "End date of the dispo view"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/dpo.ResourceAllocationWithPhasesAndAbsences"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/dpo.ResourceAllocationWithPhasesAndAbsences"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/dpo.ResourceAllocationWithPhasesAndAbsences"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/AbsenceBlocks": {
			"get": {
				"description": "Get absence blocks for a resource",
				"summary": "dpo.getAbsenceBlocksByResource",
				"operationId": "dpo.getAbsenceBlocksByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "Begin date of the absence block"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "End date of the absence block"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.GanttItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.GanttItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.GanttItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/CopyItemToResource": {
			"post": {
				"description": "Copy a disposition to another resource",
				"summary": "dpo.copyToOtherResource",
				"operationId": "dpo.copyToOtherResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Type of resource to copy"
					},
					{
						"name": "itemId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "ID of item to copy"
					},
					{
						"name": "targetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Target ID for item to copy"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/DeleteItem": {
			"post": {
				"description": "Deletes a disposition of a resource",
				"summary": "dpo.delDispoByResource",
				"operationId": "dpo.delDispoByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Type of resource to delete"
					},
					{
						"name": "itemId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "ID of item to delete"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/MoveItem": {
			"post": {
				"description": "Move a disposition to other date range",
				"summary": "dpo.moveDispoByResource",
				"operationId": "dpo.moveDispoByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Type of resource to move"
					},
					{
						"name": "itemId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "ID of item to move"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Begin date time of item to move"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "End date ttime of item to move"
					},
					{
						"name": "adaptalloc",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": ""
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/MoveItemToResource": {
			"post": {
				"description": "Move a disposition to another resource",
				"summary": "dpo.moveToOtherResource",
				"operationId": "dpo.moveToOtherResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Type of resource to move"
					},
					{
						"name": "itemId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "ID of item to move"
					},
					{
						"name": "targetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Target ID for item to move"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/NewItem": {
			"post": {
				"description": "Create a new dispo object and returns a reference to it",
				"summary": "dpo.newDispoByResource",
				"operationId": "dpo.newDispoByResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Type of new resource"
					},
					{
						"name": "parentType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Type of parent resource"
					},
					{
						"name": "parentId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "ID of parent item"
					},
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Name of new item"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Begin datetime of new item"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "End datetime of new item"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/DPO/DispoView/ByResource/{resourceId}/WorkItem/{itemId}": {
			"get": {
				"description": "Get project phase for disposition",
				"summary": "dpo.getWorkItem",
				"operationId": "dpo.getWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a project phase for disposition",
				"summary": "dpo.putWorkItem",
				"operationId": "dpo.putWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project phase for disposition",
				"summary": "dpo.delWorkItem",
				"operationId": "dpo.delWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "itemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/Calculator/Sum": {
			"post": {
				"description": "Calculates a sum of currency amounts",
				"summary": "fco.calculateSum",
				"operationId": "fco.calculateSum",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination currency (optional, use single or home currency if not specified)"
					},
					{
						"name": "at",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day whose exchange rates should be used (optional)"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/fco.CurrencyAmount"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyAmount"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyAmount"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyAmount"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CostsCenter/{costsCenterId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getCostsCenter",
				"operationId": "fco.getCostsCenter",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "costsCenterId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired costs center"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CostsCenters": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getCostsCenters",
				"operationId": "fco.getCostsCenters",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CostsType/{costsTypeId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getCostsType",
				"operationId": "fco.getCostsType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "costsTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired costs type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CostsTypeGroup/{costsTypeGroupId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getCostsTypeGroup",
				"operationId": "fco.getCostsTypeGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "costsTypeGroupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired costs type group"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsTypeGroup"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsTypeGroup"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsTypeGroup"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CostsTypeGroups": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getCostsTypeGroups",
				"operationId": "fco.getCostsTypeGroups",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsTypeGroup"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsTypeGroup"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsTypeGroup"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CostsTypes": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getCostsTypes",
				"operationId": "fco.getCostsTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsType"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsType"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsType"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/Currencies": {
			"get": {
				"description": "Returns all available currencies",
				"summary": "fco.getCurrencies",
				"operationId": "fco.getCurrencies",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.Currency"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.Currency"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.Currency"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/Currency/{currencyId}": {
			"get": {
				"description": "Returns a currency",
				"summary": "fco.getCurrency",
				"operationId": "fco.getCurrency",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores a currency",
				"summary": "fco.putCurrency",
				"operationId": "fco.putCurrency",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a currency",
				"summary": "fco.delCurrency",
				"operationId": "fco.delCurrency",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/Currency/{currencyId}/ExchangeRate/At/{date}": {
			"get": {
				"description": "Returns an exchange rate of a given currency at a specific date",
				"summary": "fco.getCurrencyExchangeRateAt",
				"operationId": "fco.getCurrencyExchangeRateAt",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "date",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The date where the rate should apply"
					},
					{
						"name": "reciprocal",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Use reciprocal values"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Sets an exchange rate of a given currency at a specific date",
				"summary": "fco.putCurrencyExchangeRateAt",
				"operationId": "fco.putCurrencyExchangeRateAt",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "date",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The first date where the rate should apply"
					},
					{
						"name": "reciprocal",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Use reciprocal values"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes an exchange rate of a given currency at a specific date (that means the rate from the day before is still valid until the next explicit rate)",
				"summary": "fco.delCurrencyExchangeRateAt",
				"operationId": "fco.delCurrencyExchangeRateAt",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "date",
						"in": "path",
						"required": true,
						"type": "string",
						"format": "date",
						"description": "The first date where the rate should apply"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/Currency/{currencyId}/ExchangeRate/Today": {
			"get": {
				"description": "Returns an exchange rate of a given currency at a specific date",
				"summary": "fco.getTodaysCurrencyExchangeRate",
				"operationId": "fco.getTodaysCurrencyExchangeRate",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "reciprocal",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Use reciprocal values"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRate"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/Currency/{currencyId}/ExchangeRates": {
			"get": {
				"description": "Returns all exchange rates of a given currency",
				"summary": "fco.getCurrencyExchangeRates",
				"operationId": "fco.getCurrencyExchangeRates",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "reciprocal",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Use reciprocal values"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRates"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRates"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyExchangeRates"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/CurrencyExchange/{currencyId}/{amount}": {
			"get": {
				"description": "Converts a currency into another",
				"summary": "fco.convertCurrency",
				"operationId": "fco.convertCurrency",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currencyId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the currency"
					},
					{
						"name": "amount",
						"in": "path",
						"required": true,
						"type": "number",
						"format": "double",
						"description": "The amount of money to convert"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination currency (optional, use home currency if not specified)"
					},
					{
						"name": "at",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day whose exchange rates should be used (optional)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyAmount"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyAmount"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CurrencyAmount"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/HomeCurrency": {
			"get": {
				"description": "Returns a currency",
				"summary": "fco.getHomeCurrency",
				"operationId": "fco.getHomeCurrency",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.Currency"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/MacroAllocationCosts/{macroAllocationId}/PlannedCosts": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getMacroAllocationPlannedCosts",
				"operationId": "fco.getMacroAllocationPlannedCosts",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "macroAllocationId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The macro allocation's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsForecast"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsForecast"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsForecast"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PayPlan/{payPlanId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPayPlan",
				"operationId": "fco.getPayPlan",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "payPlanId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the desired costs center"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PayPlans": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPayPlans",
				"operationId": "fco.getPayPlans",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/BudgetPosition/Timeline/{bupId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioBudgetPositionTimeline",
				"operationId": "fco.getPortfolioBudgetPositionTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio budget position ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "The desired start of the timeline"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "The desired end of the timeline"
					},
					{
						"name": "granularity",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity (minimal distance between points) of the timeline"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Timeline"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Timeline"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Timeline"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/BudgetPosition/{bupId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioBudgetPosition",
				"operationId": "fco.getPortfolioBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio budget position ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.putPortfolioBudgetPosition",
				"operationId": "fco.putPortfolioBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio budget position ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.delPortfolioBudgetPosition",
				"operationId": "fco.delPortfolioBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio budget position ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/BudgetPositions": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioBudgetPositions",
				"operationId": "fco.getPortfolioBudgetPositions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.BudgetPosition"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.BudgetPosition"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.BudgetPosition"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/BudgetPositions/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.addPortfolioBudgetPosition",
				"operationId": "fco.addPortfolioBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "pos",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The sort index that determines the position of the inserted object"
					},
					{
						"name": "inheritFrom",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the budget that should be inherited"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The currency of the new budget position"
					},
					{
						"name": "amount",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The amount of the new budget position"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/CostsTimeline": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioCostsTimeline",
				"operationId": "fco.getPortfolioCostsTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the timeline"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the timeline"
					},
					{
						"name": "zoom",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity (time units) of the timeline"
					},
					{
						"name": "grouping",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The grouping hierarchy that should be applied"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/ExternalBudgets": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioExternalBudgets",
				"operationId": "fco.getPortfolioExternalBudgets",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/ForeignBudgets": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioForeignBudgets",
				"operationId": "fco.getPortfolioForeignBudgets",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/Overview": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioCostsOverview",
				"operationId": "fco.getPortfolioCostsOverview",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/PortfolioCosts/{ppfId}/SubObjBudgets": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getPortfolioSubObjBudgets",
				"operationId": "fco.getPortfolioSubObjBudgets",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{prjid}/ExternalBudgets": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectExternalBudgets",
				"operationId": "fco.getProjectExternalBudgets",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{prjid}/ForeignBudgets": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectForeignBudgets",
				"operationId": "fco.getProjectForeignBudgets",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{prjid}/SubObjBudgets": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectSubObjBudgets",
				"operationId": "fco.getProjectSubObjBudgets",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ExternalBudget"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{prjId}/Overview": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsOverview",
				"operationId": "fco.getProjectCostsOverview",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/BudgetPosition/{bupId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectBudgetPosition",
				"operationId": "fco.getProjectBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project budget position ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.putProjectBudgetPosition",
				"operationId": "fco.putProjectBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project budget position ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/fco.BudgetPosition"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.delProjectBudgetPosition",
				"operationId": "fco.delProjectBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "bupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project budget position ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/BudgetPositions": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectBudgetPositions",
				"operationId": "fco.getProjectBudgetPositions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.BudgetPosition"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.BudgetPosition"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.BudgetPosition"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/BudgetPositions/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.addProjectBudgetPosition",
				"operationId": "fco.addProjectBudgetPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "ppfId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio ID of whose the new budget position should be inherited"
					},
					{
						"name": "budgetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the budget that should be inherited"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The currency of the new budget position"
					},
					{
						"name": "amount",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The amount of the new budget position"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsActuals": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsActuals",
				"operationId": "fco.getProjectCostsActuals",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsActualGroup"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsActualGroup"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsActualGroup"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPosition/{posId}/CostsActual/{actualId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsPositionActual",
				"operationId": "fco.getProjectCostsPositionActual",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "posId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The source costs position's ID"
					},
					{
						"name": "actualId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs actual's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsActual"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsActual"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsActual"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.putProjectCostsPositionActual",
				"operationId": "fco.putProjectCostsPositionActual",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "posId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The source costs position's ID"
					},
					{
						"name": "actualId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs actual's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/fco.CostsActual"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.delProjectCostsPositionActual",
				"operationId": "fco.delProjectCostsPositionActual",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "posId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The source costs position's ID"
					},
					{
						"name": "actualId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs actual's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPosition/{posId}/CostsActual/{actualId}/Move": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.moveCostsPositionActual",
				"operationId": "fco.moveCostsPositionActual",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "posId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The source costs position's ID"
					},
					{
						"name": "actualId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs actual's ID"
					},
					{
						"name": "targetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination costs position's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPosition/{posId}/CostsActuals": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsPositionActuals",
				"operationId": "fco.getProjectCostsPositionActuals",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "posId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The source costs position's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsActual"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsActual"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.CostsActual"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPosition/{posId}/CostsActuals/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.addProjectCostsPositionActual",
				"operationId": "fco.addProjectCostsPositionActual",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "posId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The source costs position's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The currency of the new costs position actual"
					},
					{
						"name": "amount",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The amount of the new costs position actual"
					},
					{
						"name": "timeofpayment",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The date when the new actual was (or will be) payed"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPosition/{positionId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsPosition",
				"operationId": "fco.getProjectCostsPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "positionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs position ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.ProjectCostsPosition"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.ProjectCostsPosition"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.ProjectCostsPosition"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.putProjectCostsPosition",
				"operationId": "fco.putProjectCostsPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "positionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs position ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/fco.ProjectCostsPosition"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.delProjectCostsPosition",
				"operationId": "fco.delProjectCostsPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "positionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs position ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPosition/{positionId}/CostsTimeline": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsPositionCostsTimeline",
				"operationId": "fco.getProjectCostsPositionCostsTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "positionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The costs position ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the timeline"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the timeline"
					},
					{
						"name": "zoom",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity (time units) of the timeline"
					},
					{
						"name": "grouping",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The grouping hierarchy that should be applied"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPositions": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsPositions",
				"operationId": "fco.getProjectCostsPositions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ProjectCostsPosition"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ProjectCostsPosition"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/fco.ProjectCostsPosition"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsPositions/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.addProjectCostsPosition",
				"operationId": "fco.addProjectCostsPosition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project ID"
					},
					{
						"name": "pos",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The sort index that determines the position of the inserted object"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The currency of the new costs position"
					},
					{
						"name": "amount",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The amount of the new costs position"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectCosts/{projectId}/CostsTimeline": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectCostsTimeline",
				"operationId": "fco.getProjectCostsTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the timeline"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the timeline"
					},
					{
						"name": "zoom",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity (time units) of the timeline"
					},
					{
						"name": "grouping",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The grouping hierarchy that should be applied"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ProjectPhaseCosts/{phaseId}/PlannedCosts": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectPhasePlannedCosts",
				"operationId": "fco.getProjectPhasePlannedCosts",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project phase (workitem)'s ID"
					},
					{
						"name": "recursive",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Recursive mode over all sub phases"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsForecasts"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsForecasts"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsForecasts"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ScenarioCosts/{projectScenarioId}/CostsTimeline": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectScenarioCostsTimeline",
				"operationId": "fco.getProjectScenarioCostsTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectScenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the timeline"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the timeline"
					},
					{
						"name": "zoom",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity (time units) of the timeline"
					},
					{
						"name": "grouping",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The grouping hierarchy that should be applied"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsMatrix"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/FCO/ScenarioCosts/{projectScenarioId}/Overview": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "fco.getProjectScenarioCostsOverview",
				"operationId": "fco.getProjectScenarioCostsOverview",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectScenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio from which the costs should be seen (with respect to own / foreign budgets)"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired start of the time period"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The desired end of the time period"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/fco.CostsOverview"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Object/{objtype}/{objid}/History": {
			"get": {
				"description": "Returns the lifecycle history of a given object",
				"summary": "lcy.getObjectHistory",
				"operationId": "lcy.getObjectHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object"
					},
					{
						"name": "objid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleHistory"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleHistory"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleHistory"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Object/{objtype}/{objid}/ReachableStates": {
			"get": {
				"description": "Returns the states that are reachable by a given object",
				"summary": "lcy.getObjectReachableStates",
				"operationId": "lcy.getObjectReachableStates",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object"
					},
					{
						"name": "objid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Object/{objtype}/{objid}/State": {
			"get": {
				"description": "Returns the state of a given object",
				"summary": "lcy.getObjectState",
				"operationId": "lcy.getObjectState",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object"
					},
					{
						"name": "objid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Object/{objtype}/{objid}/Transitions": {
			"get": {
				"description": "Returns the transitions that are allowed for the current user to apply to a given object",
				"summary": "lcy.getObjectTransitions",
				"operationId": "lcy.getObjectTransitions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object"
					},
					{
						"name": "objid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleTransition"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleTransition"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleTransition"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Object/{objtype}/{objid}/Upgrade/{transition}": {
			"post": {
				"description": "Returns the lifecycle history of a given object",
				"summary": "lcy.upgradeObject",
				"operationId": "lcy.upgradeObject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object"
					},
					{
						"name": "objid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					},
					{
						"name": "transition",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "transition to apply"
					},
					{
						"name": "remark",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "A remark that provides additional information about the transition"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/State/{id}": {
			"get": {
				"description": "Returns information about a specific lifecycle state",
				"summary": "lcy.getState",
				"operationId": "lcy.getState",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the lifecycle state"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/State/{id}/ReachableStates": {
			"get": {
				"description": "Returns all states that can be reached starting from a specific lifecycle state",
				"summary": "lcy.getStateReachableStates",
				"operationId": "lcy.getStateReachableStates",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the lifecycle state"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/State/{id}/Transitions": {
			"get": {
				"description": "Returns a specific lifecycle state's possible transitions",
				"summary": "lcy.getStateTransitions",
				"operationId": "lcy.getStateTransitions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the lifecycle state"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleTransition"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleTransition"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleTransition"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/State/{id}/{objtype}/Objects": {
			"get": {
				"description": "Returns all objects of a given type in a given state",
				"summary": "lcy.getObjectsByState",
				"operationId": "lcy.getObjectsByState",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the lifecycle state"
					},
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Reference"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Reference"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Reference"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Type/{objtype}/InitialState": {
			"get": {
				"description": "Returns the state that will be set for new objects of a given type",
				"summary": "lcy.getTypeInitialState",
				"operationId": "lcy.getTypeInitialState",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/lcy.LifecycleState"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LCY/Type/{objtype}/ReachableStates": {
			"get": {
				"description": "Returns all states that can be reached by objects of a given type",
				"summary": "lcy.getTypeReachableStates",
				"operationId": "lcy.getTypeReachableStates",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objtype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.LifecycleState"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/LIC/License/Status": {
			"get": {
				"description": "Returns important information about the current licensing status (admin privileges required)",
				"summary": "lic.getLicenseStatus",
				"operationId": "lic.getLicenseStatus",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/lic.LicenseStatus"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/lic.LicenseStatus"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/lic.LicenseStatus"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MAIN/ApiDescription/OpenApi/303/Json": {
			"get": {
				"description": "Returns an Open API 3.0.3 JSON definition of the API V2",
				"summary": "main.getOpenApi3Json",
				"operationId": "main.getOpenApi3Json",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/MAIN/Versions": {
			"get": {
				"description": "Returns information about the PQFORCE server and it's versions (Release, API), this step is recommended to check API compatibility",
				"summary": "main.getVersion",
				"operationId": "main.getVersion",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/main.Versions"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/main.Versions"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/main.Versions"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/MSG/Message/Post": {
			"post": {
				"description": "Send a message to others",
				"summary": "msg.postMessage",
				"operationId": "msg.postMessage",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/msg.MessageContent"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MSG/Message/{messageId}": {
			"get": {
				"description": "Returns the message with given ID",
				"summary": "msg.getMessage",
				"operationId": "msg.getMessage",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "messageId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the message"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/msg.Message"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/msg.Message"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/msg.Message"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a message with given ID. This message may still be available to others.",
				"summary": "msg.delMessage",
				"operationId": "msg.delMessage",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "messageId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the message"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MSG/Message/{messageId}/Read": {
			"post": {
				"description": "Marks a given message as read",
				"summary": "msg.readMessage",
				"operationId": "msg.readMessage",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "messageId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the message"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MSG/Messages": {
			"get": {
				"description": "Returns all messages for the current user's resource",
				"summary": "msg.getMessages",
				"operationId": "msg.getMessages",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "includeread",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also messages that have been read"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/msg.Message"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/msg.Message"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/msg.Message"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MSG/MessageTriggers": {
			"get": {
				"description": "Returns all message triggers that are known for the current tenant",
				"summary": "msg.getMessageTriggers",
				"operationId": "msg.getMessageTriggers",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/Meeting/{id}/MoveOrCopy/{parentGroupId}": {
			"post": {
				"description": "Move or copy a meeting",
				"summary": "mtg.moveOrCopyMeeting",
				"operationId": "mtg.moveOrCopyMeeting",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The meeting Id"
					},
					{
						"name": "parentGroupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Parent meeting group id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/Meeting/{id}/MoveTo/{parentGroupId}": {
			"post": {
				"description": "Move a meeting",
				"summary": "mtg.moveMeeting",
				"operationId": "mtg.moveMeeting",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The meeting Id"
					},
					{
						"name": "parentGroupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Parent meeting group id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/Meeting/{meetingId}": {
			"get": {
				"description": "Get specific meeting by ID",
				"summary": "mtg.getMeeting",
				"operationId": "mtg.getMeeting",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "meetingId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the meeting"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/mtg.Meeting"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/mtg.Meeting"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/mtg.Meeting"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Insert a new meeting",
				"summary": "mtg.putMeeting",
				"operationId": "mtg.putMeeting",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "meetingId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the meeting"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/mtg.Meeting"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "delete a meeting",
				"summary": "mtg.delMeeting",
				"operationId": "mtg.delMeeting",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "meetingId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the meeting to delete"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{groupid}/Meetings": {
			"get": {
				"description": "Get meetings belonging to group with given id",
				"summary": "mtg.getMeetingsOfGroup",
				"operationId": "mtg.getMeetingsOfGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Meeting group id"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter the meetings according to the given state"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{groupid}/Meetings/Add": {
			"post": {
				"description": "Get meetings belonging to group with given id",
				"summary": "mtg.addMeeting",
				"operationId": "mtg.addMeeting",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Meeting group id"
					},
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Meeting obj to add to the group"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{groupid}/MoveTo/{parentGroupId}": {
			"post": {
				"description": "Move group with with given id to another group",
				"summary": "mtg.moveGroup",
				"operationId": "mtg.moveGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Meeting group id"
					},
					{
						"name": "parentGroupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Parent meeting group id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{groupid}/MoveToTop": {
			"post": {
				"description": "Move group with with given id to top level",
				"summary": "mtg.moveGroupToTop",
				"operationId": "mtg.moveGroupToTop",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Meeting group id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{groupid}/SubGroups": {
			"get": {
				"description": "Get sub meetings belonging to group with given id",
				"summary": "mtg.getSubGroups",
				"operationId": "mtg.getSubGroups",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Meeting group id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.MeetingGroup"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.MeetingGroup"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.MeetingGroup"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{groupid}/SubGroups/Add": {
			"post": {
				"description": "Get sub meetings belonging to group with given id",
				"summary": "mtg.addMeetingGroupSubGroup",
				"operationId": "mtg.addMeetingGroupSubGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Meeting group id"
					},
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Meeting obj to add to the sub group"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroup/{id}": {
			"get": {
				"description": "Get a specific meeting group",
				"summary": "mtg.getMeetingGroup",
				"operationId": "mtg.getMeetingGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The meeting group Id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/mtg.MeetingGroup"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/mtg.MeetingGroup"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/mtg.MeetingGroup"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Create/Update a meeting group",
				"summary": "mtg.putMeetingGroup",
				"operationId": "mtg.putMeetingGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The meeting group Id"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/mtg.MeetingGroup"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Delete a specific meeting group",
				"summary": "mtg.delMeetingGroup",
				"operationId": "mtg.delMeetingGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The meeting group Id"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/MeetingGroups": {
			"get": {
				"description": "Get all meetings groups",
				"summary": "mtg.getMeetingGroups",
				"operationId": "mtg.getMeetingGroups",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.MeetingGroup"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.MeetingGroup"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.MeetingGroup"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"post": {
				"description": "Add a meeting group",
				"summary": "mtg.addMeetingGroup",
				"operationId": "mtg.addMeetingGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Meeting group to add"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/Meetings": {
			"get": {
				"description": "Get all meetings",
				"summary": "mtg.getMeetings",
				"operationId": "mtg.getMeetings",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter the meetings according to the given state"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/MTG/Meetings/ByRef/{reltype}/{reftype}/{refid}": {
			"get": {
				"description": "Get meetings by reference type and id",
				"summary": "mtg.getMeetingsByRef",
				"operationId": "mtg.getMeetingsByRef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reltype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Relation type"
					},
					{
						"name": "reftype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Reference type"
					},
					{
						"name": "refid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "Reference id"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter the meetings according to the given state"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/mtg.Meeting"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Context/{type}/{id}": {
			"get": {
				"description": "Return navigation information (object, parents, links, access rights) about a specific object",
				"summary": "nav.getContext",
				"operationId": "nav.getContext",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					},
					{
						"name": "parentType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The type of parent to use, if object type has ambiguous parents"
					},
					{
						"name": "parentId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The parent's ID, if object type has ambiguous parents"
					},
					{
						"name": "deleted",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Allow links to deleted objects to be returned"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/nav.NavigationContext"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/nav.NavigationContext"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/nav.NavigationContext"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Context/{type}/{id}/Search": {
			"get": {
				"description": "Search connected objects, starting from a given point",
				"summary": "nav.getContextSearch",
				"operationId": "nav.getContextSearch",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					},
					{
						"name": "query",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Full text search parameter"
					},
					{
						"name": "regex",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Regex search parameter"
					},
					{
						"name": "recursive",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Whether to perform recursive search"
					},
					{
						"name": "ranking",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "The maximum ranking of members to be included into search"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationLink"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationLink"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationLink"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Find": {
			"post": {
				"description": "Extended search for different object properties across relations",
				"summary": "nav.findObjects",
				"operationId": "nav.findObjects",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/nav.FindRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Object/{type}/{id}": {
			"get": {
				"description": "Return general information (object, access rights) about a specific object",
				"summary": "nav.getObject",
				"operationId": "nav.getObject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object"
					},
					{
						"name": "deleted",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Allow a deleted object to be returned"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/nav.NavigationItem"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/nav.NavigationItem"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/nav.NavigationItem"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/RootContext": {
			"get": {
				"description": "Return navigation information (object, links, access rights) about the root object",
				"summary": "nav.getRootContext",
				"operationId": "nav.getRootContext",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deleted",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Allow links to deleted objects to be returned"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/nav.NavigationContext"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/nav.NavigationContext"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/nav.NavigationContext"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Type/{type}": {
			"get": {
				"description": "Search all objects of a given type",
				"summary": "nav.getSearch",
				"operationId": "nav.getSearch",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "query",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Full text search parameter"
					},
					{
						"name": "regex",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Regex search parameter"
					},
					{
						"name": "ranking",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "The maximum ranking of members to be included into search"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Type/{type}/MemberRangeSearch": {
			"get": {
				"description": "Search text by member",
				"summary": "nav.getMemberRangeSearch",
				"operationId": "nav.getMemberRangeSearch",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Type/{type}/MemberRegexSearch": {
			"get": {
				"description": "Search text by member",
				"summary": "nav.getMemberRegexSearch",
				"operationId": "nav.getMemberRegexSearch",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/Type/{type}/MemberTextSearch": {
			"get": {
				"description": "Search text by member",
				"summary": "nav.getMemberTextSearch",
				"operationId": "nav.getMemberTextSearch",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.NavigationItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/NAV/TypeInfos": {
			"get": {
				"description": "Return meta information about types used in navigation, their properties and URLs",
				"summary": "nav.getTypeInfos",
				"operationId": "nav.getTypeInfos",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "language",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The language in which the names and labels should be returned"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.TypeInfo"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.TypeInfo"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/nav.TypeInfo"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Attachment/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pf.addAttachment",
				"operationId": "pf.addAttachment",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"*/*"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"*/*"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentDetails"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentDetails"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentDetails"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Attachment/{attachmentId}": {
			"get": {
				"description": "Retrieves an attachment stored in PQFORCE",
				"summary": "pf.getAttachment",
				"operationId": "pf.getAttachment",
				"deprecated": false,
				"produces": [
					"produces"
				],
				"parameters": [
					{
						"name": "attachmentId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the attachment"
					},
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The filename that has to be proposed when downloading the attachment"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Attachment/{attachmentId}/Details": {
			"get": {
				"description": "Retrieves information (no data) about an attachment stored in PQFORCE",
				"summary": "pf.getAttachmentDetails",
				"operationId": "pf.getAttachmentDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "attachmentId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the attachment"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentDetails"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentDetails"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentDetails"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Attachment/{objType}/{objId}/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pf.addAttachmentAndLink",
				"operationId": "pf.addAttachmentAndLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"*/*"
				],
				"parameters": [
					{
						"name": "objType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object that should be linked"
					},
					{
						"name": "objId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object that should be linked"
					},
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The name of the new document link"
					},
					{
						"name": "code",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The code of the new document link"
					},
					{
						"name": "description",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The description of the new document link"
					},
					{
						"name": "sortindex",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The sort index of the new document link"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"*/*"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentLink"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentLink"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.AttachmentLink"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Barcode/DataMatrix": {
			"get": {
				"description": "Turns some text into a QR code",
				"summary": "pf.getDataMatrix",
				"operationId": "pf.getDataMatrix",
				"deprecated": false,
				"produces": [
					"image/svg+xml"
				],
				"parameters": [
					{
						"name": "text",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The text that should be encoded"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Barcode/QR": {
			"get": {
				"description": "Turns some text into a QR code",
				"summary": "pf.getQrCode",
				"operationId": "pf.getQrCode",
				"deprecated": false,
				"produces": [
					"image/svg+xml"
				],
				"parameters": [
					{
						"name": "text",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The text that should be encoded"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Config/{configId}": {
			"get": {
				"description": "Returns a configuration value that is tenant-specific",
				"summary": "pf.getConfig",
				"operationId": "pf.getConfig",
				"deprecated": false,
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "configId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the configuration value"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Sets a configuration value that is tenant-specific",
				"summary": "pf.putConfig",
				"operationId": "pf.putConfig",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "configId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the configuration value"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"text/plain"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a configuration value that is tenant-specific",
				"summary": "pf.delConfig",
				"operationId": "pf.delConfig",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "configId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the configuration value"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Connection/Inspect": {
			"post": {
				"description": "Analyzes the connection between client and server",
				"summary": "pf.inspectConnection",
				"operationId": "pf.inspectConnection",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.ConnectionInformationSeenFromClient"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.ConnectionInformationSeenFromServer"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.ConnectionInformationSeenFromServer"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.ConnectionInformationSeenFromServer"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/PF/DefaultIcon/{objType}": {
			"get": {
				"description": "CReates the default icon for an object given its name and / or code",
				"summary": "pf.getDefaultIcon",
				"operationId": "pf.getDefaultIcon",
				"deprecated": false,
				"produces": [
					"image/svg+xml"
				],
				"parameters": [
					{
						"name": "objType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The name of the object"
					},
					{
						"name": "code",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The code of the object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/DocLinks/{objType}/{objId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pf.getDocumentLinks",
				"operationId": "pf.getDocumentLinks",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object that is linked"
					},
					{
						"name": "objId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object that is linked"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.DocumentLink"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.DocumentLink"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.DocumentLink"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/DocLinks/{objType}/{objId}/{linkId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pf.getDocumentLink",
				"operationId": "pf.getDocumentLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object that is linked"
					},
					{
						"name": "objId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object that is linked"
					},
					{
						"name": "linkId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the link"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.DocumentLink"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.DocumentLink"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.DocumentLink"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pf.putDocumentLink",
				"operationId": "pf.putDocumentLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object that is linked"
					},
					{
						"name": "objId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object that is linked"
					},
					{
						"name": "linkId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the link"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.DocumentLink"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pf.delDocumentLink",
				"operationId": "pf.delDocumentLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the object that is linked"
					},
					{
						"name": "objId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the object that is linked"
					},
					{
						"name": "linkId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the link"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Enum/{typeId}/Value/{valueId}": {
			"get": {
				"description": "Returns values of an enum in the user's language",
				"summary": "pf.getEnumValue",
				"operationId": "pf.getEnumValue",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					},
					{
						"name": "valueId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum value ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Enum/{typeId}/Value/{valueId}/WithTranslations": {
			"get": {
				"description": "Returns values of an enum with translations",
				"summary": "pf.getEnumValueTranslated",
				"operationId": "pf.getEnumValueTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					},
					{
						"name": "valueId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum value ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.ItemTranslated"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.ItemTranslated"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.ItemTranslated"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Returns values of an enum with translations",
				"summary": "pf.putEnumValueTranslated",
				"operationId": "pf.putEnumValueTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					},
					{
						"name": "valueId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum value ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.ItemTranslated"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Returns values of an enum with translations",
				"summary": "pf.delEnumValueTranslated",
				"operationId": "pf.delEnumValueTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					},
					{
						"name": "valueId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum value ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Enum/{typeId}/Values": {
			"get": {
				"description": "Returns values of an enum in the user's language",
				"summary": "pf.getEnumValues",
				"operationId": "pf.getEnumValues",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates values of an enum by using a single translation",
				"summary": "pf.putEnumValues",
				"operationId": "pf.putEnumValues",
				"deprecated": true,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Enum/{typeId}/Values/WithTranslations": {
			"get": {
				"description": "Returns values of an enum with translations",
				"summary": "pf.getEnumValuesTranslated",
				"operationId": "pf.getEnumValuesTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.ItemTranslated"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.ItemTranslated"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.ItemTranslated"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates values of an enum with translations",
				"summary": "pf.putEnumValuesTranslated",
				"operationId": "pf.putEnumValuesTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/pf.ItemTranslated"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes all values of an enum",
				"summary": "pf.delEnumValuesTranslated",
				"operationId": "pf.delEnumValuesTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The enum type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/ExplicitRelations/{relationType}/Add": {
			"post": {
				"description": "Adds an explicit relation between two objects",
				"summary": "pf.addExplicitRelation",
				"operationId": "pf.addExplicitRelation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "relationType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The relation type"
					},
					{
						"name": "sourcetype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the source object's type"
					},
					{
						"name": "sourceid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the source object's ID"
					},
					{
						"name": "targettype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the target object's type"
					},
					{
						"name": "targetid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the target object's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Removed an explicit relation between two objects",
				"summary": "pf.delExplicitRelation",
				"operationId": "pf.delExplicitRelation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "relationType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The relation type"
					},
					{
						"name": "sourcetype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the source object's type"
					},
					{
						"name": "sourceid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the source object's ID"
					},
					{
						"name": "targettype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the target object's type"
					},
					{
						"name": "targetid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "the target object's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/ObjectType/{objectType}/PropertyDefinitions": {
			"get": {
				"description": "Returns the properties of a specific object type in the user's language",
				"summary": "pf.getPropertyDefinitions",
				"operationId": "pf.getPropertyDefinitions",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the type ob object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinition"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinition"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinition"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/ObjectType/{objectType}/PropertyDefinitions/WithTranslations": {
			"get": {
				"description": "Returns the properties of a specific object type in the user's language",
				"summary": "pf.getPropertyDefinitionsTranslated",
				"operationId": "pf.getPropertyDefinitionsTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the type ob object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinitionTranslated"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinitionTranslated"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinitionTranslated"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Returns the properties of a specific object type in the user's language",
				"summary": "pf.putPropertyDefinitionsTranslated",
				"operationId": "pf.putPropertyDefinitionsTranslated",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the type ob object"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/pf.PropertyDefinitionTranslated"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/ObjectTypes/WithDynamicProperties": {
			"get": {
				"description": "Returns all types with dynamic properties",
				"summary": "pf.getPropertyDefinitionTypes",
				"operationId": "pf.getPropertyDefinitionTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/PropertyDefinition/{definitionId}": {
			"get": {
				"description": "Returns a property definition with speific ID",
				"summary": "pf.getPropertyDefinition",
				"operationId": "pf.getPropertyDefinition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "definitionId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the property definition ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.PropertyDefinition"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.PropertyDefinition"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.PropertyDefinition"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Relations/OfCurrentUser/All": {
			"get": {
				"description": "Returns all relations that start or end on the current user's resource",
				"summary": "pf.getCurrentUserAllRelations",
				"operationId": "pf.getCurrentUserAllRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "desttype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source or target object type"
					},
					{
						"name": "destid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source or target object ID"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by relation type"
					},
					{
						"name": "includeimplicit",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also implicit relations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Relations/OfCurrentUser/Backward": {
			"get": {
				"description": "Returns all relations that end on the current user's resource",
				"summary": "pf.getCurrentUserBackwardRelations",
				"operationId": "pf.getCurrentUserBackwardRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sourcetype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source object type"
					},
					{
						"name": "sourceid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source object ID"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by relation type"
					},
					{
						"name": "includeimplicit",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also implicit relations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Relations/OfCurrentUser/Forward": {
			"get": {
				"description": "Returns all relations that start on the current user's resource",
				"summary": "pf.getCurrentUserForwardRelations",
				"operationId": "pf.getCurrentUserForwardRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "targettype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by target object type"
					},
					{
						"name": "targetid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by target object ID"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by relation type"
					},
					{
						"name": "includeimplicit",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also implicit relations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Relations/OfObject/{objectType}/{objectId}/All": {
			"get": {
				"description": "Returns all relations that start or end on a given object",
				"summary": "pf.getAllRelations",
				"operationId": "pf.getAllRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					},
					{
						"name": "objectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the objects"
					},
					{
						"name": "desttype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source or target object type"
					},
					{
						"name": "destid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source or target object ID"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by relation type"
					},
					{
						"name": "includeimplicit",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also implicit relations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Relations/OfObject/{sourceType}/{sourceId}/Forward": {
			"get": {
				"description": "Returns all relations that start on a given object",
				"summary": "pf.getForwardRelations",
				"operationId": "pf.getForwardRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "sourceType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					},
					{
						"name": "sourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the objects"
					},
					{
						"name": "targettype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by target object type"
					},
					{
						"name": "targetid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by target object ID"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by relation type"
					},
					{
						"name": "includeimplicit",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also implicit relations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Relations/OfObject/{targetType}/{targetId}/Backward": {
			"get": {
				"description": "Returns all relations that end on a given object",
				"summary": "pf.getBackwardRelations",
				"operationId": "pf.getBackwardRelations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "targetType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					},
					{
						"name": "targetId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the objects"
					},
					{
						"name": "sourcetype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source object type"
					},
					{
						"name": "sourceid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by source object ID"
					},
					{
						"name": "type",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Filter by relation type"
					},
					{
						"name": "includeimplicit",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also implicit relations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Relation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/RelationType/{relationType}": {
			"get": {
				"description": "Returns a specific relation type",
				"summary": "pf.getRelationType",
				"operationId": "pf.getRelationType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "relationType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the relation type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.RelationTypeWithConstraints"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.RelationTypeWithConstraints"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.RelationTypeWithConstraints"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/RelationTypes": {
			"get": {
				"description": "Returns a specific relation type",
				"summary": "pf.getRelationTypes",
				"operationId": "pf.getRelationTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/RelationTypes/OfObjectType/{objectType}/AllRelTypes": {
			"get": {
				"description": "Returns all relation types of relations that may start or end on a given type of object",
				"summary": "pf.getAllRelationTypesForType",
				"operationId": "pf.getAllRelationTypesForType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/RelationTypes/OfObjectType/{objectType}/BackwardRelTypes": {
			"get": {
				"description": "Returns all relation types of relations that may end on a given type of object",
				"summary": "pf.getBackwardRelationTypesForType",
				"operationId": "pf.getBackwardRelationTypesForType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/RelationTypes/OfObjectType/{objectType}/ForwardRelTypes": {
			"get": {
				"description": "Returns all relation types of relations that may start on a given type of object",
				"summary": "pf.getForwardRelationTypesForType",
				"operationId": "pf.getForwardRelationTypesForType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "objectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of objects"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.RelationTypeWithConstraints"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/ServerConfig/{configKey}": {
			"get": {
				"description": "Returns a server-specific configuration value that is shared between tenants",
				"summary": "pf.getServerConfig",
				"operationId": "pf.getServerConfig",
				"deprecated": false,
				"produces": [
					"text/plain"
				],
				"parameters": [
					{
						"name": "configKey",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "A shared configuration value's key"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Tenant/Current": {
			"get": {
				"description": "May be used by the client to show the currently selected tenant on login screen. Returns no secret information",
				"summary": "pf.getCurrentTenant",
				"operationId": "pf.getCurrentTenant",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Tenant"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Tenant"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Tenant"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/Tenant/Current/License/Features": {
			"get": {
				"description": "May be used by the client to enable or disable certain features to optimize the client's screen design depending on licensed features",
				"summary": "pf.getCurrentTenantLicenseFeatures",
				"operationId": "pf.getCurrentTenantLicenseFeatures",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.LicenseFeatures"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.LicenseFeatures"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.LicenseFeatures"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/UnitSystem/{systemId}/Convert": {
			"get": {
				"description": "Converts a value into a specific unit",
				"summary": "pf.convertUnit",
				"operationId": "pf.convertUnit",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					},
					{
						"name": "source",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The sourceunit identifier"
					},
					{
						"name": "dest",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The sourceunit identifier"
					},
					{
						"name": "value",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The value"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.ValueWithUnit"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.ValueWithUnit"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.ValueWithUnit"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/UnitSystem/{systemId}/Factors": {
			"get": {
				"description": "Returns the factors that apply to all units of a unit system",
				"summary": "pf.getUnitsFactors",
				"operationId": "pf.getUnitsFactors",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					},
					{
						"name": "ref",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The reference unit (optional)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Manipulates the factors of a unit system",
				"summary": "pf.putUnitsFactors",
				"operationId": "pf.putUnitsFactors",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/UnitSystem/{systemId}/Preference": {
			"get": {
				"description": "Returns the preference of unit in a unit system",
				"summary": "pf.getUnitsPreference",
				"operationId": "pf.getUnitsPreference",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.UnitPreference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.UnitPreference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.UnitPreference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Manipulates the preference of unit in a unit system",
				"summary": "pf.putUnitsPreference",
				"operationId": "pf.putUnitsPreference",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.UnitPreference"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/UnitSystem/{systemId}/Unit/{unitId}": {
			"get": {
				"description": "Returns a specific unit",
				"summary": "pf.getUnit",
				"operationId": "pf.getUnit",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					},
					{
						"name": "unitId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The unit identifier"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Unit"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Unit"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Unit"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/UnitSystem/{systemId}/Units": {
			"get": {
				"description": "Returns all units of a unit system",
				"summary": "pf.getUnits",
				"operationId": "pf.getUnits",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "systemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of unit"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Unit"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Unit"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Unit"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PF/UserAgent": {
			"get": {
				"description": "Returns information about the user agent calling the server",
				"summary": "pf.getUserAgent",
				"operationId": "pf.getUserAgent",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.UserAgent"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.UserAgent"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.UserAgent"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": []
			}
		},
		"/API/V2/PI/ItemType/{type}": {
			"get": {
				"description": "Returns a specific project item type description",
				"summary": "pi.getProjectItemType",
				"operationId": "pi.getProjectItemType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItemType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItemType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItemType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemType/{type}/Add": {
			"post": {
				"description": "Adds a new project item",
				"summary": "pi.addProjectItem",
				"operationId": "pi.addProjectItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of any item to clone"
					},
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The name of the new item"
					},
					{
						"name": "description",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The description of the new item"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemType/{type}/ByRef/{reltype}/{reftype}/{refid}/Add": {
			"post": {
				"description": "Returns all project items of a specific project item type",
				"summary": "pi.addProjectItemByRef",
				"operationId": "pi.addProjectItemByRef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "reltype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of relation"
					},
					{
						"name": "reftype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the referenced object"
					},
					{
						"name": "refid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the referenced item"
					},
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of any item to clone"
					},
					{
						"name": "name",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The name of the new item"
					},
					{
						"name": "description",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The description of the new item"
					},
					{
						"name": "forward",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Specifies the direction of the relation (necessary if ambiguous)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemType/{type}/ByRef/{reltype}/{reftype}/{refid}/Items": {
			"get": {
				"description": "Returns all project items of a specific project item type",
				"summary": "pi.getProjectItemsByRef",
				"operationId": "pi.getProjectItemsByRef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "reltype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of relation"
					},
					{
						"name": "reftype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the referenced object"
					},
					{
						"name": "refid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the referenced item"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "A status list to filter (optional)"
					},
					{
						"name": "lateststatechange",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "A point in time to filter out items that have been in a state for a longer time (optional)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemType/{type}/ByRef/{reltype}/{reftype}/{refid}/ItemSummaries": {
			"get": {
				"description": "Returns all project items of a specific project item type",
				"summary": "pi.getProjectItemSummariesByRef",
				"operationId": "pi.getProjectItemSummariesByRef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "reltype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of relation"
					},
					{
						"name": "reftype",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the referenced object"
					},
					{
						"name": "refid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of the referenced item"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "A status list to filter (optional)"
					},
					{
						"name": "lateststatechange",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "A point in time to filter out items that have been in a state for a longer time (optional)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItemSummary"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItemSummary"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItemSummary"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemType/{type}/Item/{id}": {
			"get": {
				"description": "Returns a project item",
				"summary": "pi.getProjectItem",
				"operationId": "pi.getProjectItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItem"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItem"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItem"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores a project item",
				"summary": "pi.putProjectItem",
				"operationId": "pi.putProjectItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pi.ProjectItem"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project item",
				"summary": "pi.delProjectItem",
				"operationId": "pi.delProjectItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemType/{type}/Items": {
			"get": {
				"description": "Returns all project items of a specific project item type",
				"summary": "pi.getProjectItems",
				"operationId": "pi.getProjectItems",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the item type"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "A status list to filter (optional)"
					},
					{
						"name": "lateststatechange",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "A point in time to filter out items that have been in a state for a longer time (optional)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PI/ItemTypes": {
			"get": {
				"description": "Returns all available project item type descriptions",
				"summary": "pi.getProjectItemTypes",
				"operationId": "pi.getProjectItemTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItemType"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItemType"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pi.ProjectItemType"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/Classification/{id}": {
			"get": {
				"description": "Returns a specific indicator classification scheme",
				"summary": "pm.getIndicatorClassification",
				"operationId": "pm.getIndicatorClassification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator classification's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationScheme"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationScheme"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationScheme"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/Classifications": {
			"get": {
				"description": "Returns all indicator classification schemes",
				"summary": "pm.getIndicatorClassifications",
				"operationId": "pm.getIndicatorClassifications",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorClassificationScheme"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorClassificationScheme"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorClassificationScheme"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/ClassificationValue/{id}": {
			"get": {
				"description": "Returns a specific indicator classification value in the user's language",
				"summary": "pm.getIndicatorClassificationValue",
				"operationId": "pm.getIndicatorClassificationValue",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator classification value's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeValue"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeValue"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeValue"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/IntlClassification/{id}": {
			"get": {
				"description": "Returns a specific indicator classification with translations",
				"summary": "pm.getIndicatorIntlClassification",
				"operationId": "pm.getIndicatorIntlClassification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator classification value's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeIntl"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeIntl"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeIntl"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a specific indicator classification with translations",
				"summary": "pm.putIndicatorIntlClassification",
				"operationId": "pm.putIndicatorIntlClassification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator classification value's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorClassificationSchemeIntl"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a specific indicator classification",
				"summary": "pm.delIndicatorIntlClassification",
				"operationId": "pm.delIndicatorIntlClassification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator classification value's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/{projectReportTypeId}/Detail/Definition/{id}": {
			"get": {
				"description": "Returns a specific definition of an indicator detail (single position) in the user's language",
				"summary": "pm.getIndicatorDetailDef",
				"operationId": "pm.getIndicatorDetailDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDef"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDef"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDef"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/{projectReportTypeId}/Detail/Definitions": {
			"get": {
				"description": "Returns the definitions of the indicator details (single position) in the user's language",
				"summary": "pm.getIndicatorDetailDefs",
				"operationId": "pm.getIndicatorDetailDefs",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorDetailDef"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorDetailDef"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorDetailDef"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/{projectReportTypeId}/Detail/IntlDefinition/{id}": {
			"get": {
				"description": "Returns a specific definition of an indicator detail (single position) with translations",
				"summary": "pm.getIndicatorIntlDetailDef",
				"operationId": "pm.getIndicatorIntlDetailDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDefIntl"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDefIntl"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDefIntl"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a specific definition of an indicator detail (single position) with translations",
				"summary": "pm.putIndicatorIntlDetailDef",
				"operationId": "pm.putIndicatorIntlDetailDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailDefIntl"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a specific definition of an indicator detail (single position)",
				"summary": "pm.delIndicatorIntlDetailDef",
				"operationId": "pm.delIndicatorIntlDetailDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/{projectReportTypeId}/Dimension/Definition/{id}": {
			"get": {
				"description": "Returns a specific definition of an indicator dimension (position summaries) in the user's language",
				"summary": "pm.getIndicatorDimensionDef",
				"operationId": "pm.getIndicatorDimensionDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator dimension's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDef"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDef"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDef"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/{projectReportTypeId}/Dimension/Definitions": {
			"get": {
				"description": "Returns the definitions of the indicator dimensions (position summaries) in the user's language",
				"summary": "pm.getIndicatorDimensionDefs",
				"operationId": "pm.getIndicatorDimensionDefs",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorDimensionDef"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorDimensionDef"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.IndicatorDimensionDef"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Indicators/{projectReportTypeId}/Dimension/IntlDefinition/{id}": {
			"get": {
				"description": "Returns a specific definition of an indicator dimension (position summaries) with translations",
				"summary": "pm.getIndicatorIntlDimensionDef",
				"operationId": "pm.getIndicatorIntlDimensionDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator dimension's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDefIntl"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDefIntl"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDefIntl"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a specific definition of an indicator dimension (position summaries) with translations",
				"summary": "pm.putIndicatorIntlDimensionDef",
				"operationId": "pm.putIndicatorIntlDimensionDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator dimension's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDimensionDefIntl"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a specific definition of an indicator dimension (position summaries)",
				"summary": "pm.delIndicatorIntlDimensionDef",
				"operationId": "pm.delIndicatorIntlDimensionDef",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator dimension's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/MacroAllocation/{macroAllocationId}": {
			"get": {
				"description": "Returns a macro allocation with given ID",
				"summary": "pm.getMacroAllocation",
				"operationId": "pm.getMacroAllocation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "macroAllocationId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The macro allocation's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The currency for costs conversion"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.MacroAllocation"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.MacroAllocation"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.MacroAllocation"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a macro allocation with given ID",
				"summary": "pm.putMacroAllocation",
				"operationId": "pm.putMacroAllocation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "macroAllocationId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The macro allocation's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.MacroAllocation"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a macro allocation with given ID",
				"summary": "pm.delMacroAllocation",
				"operationId": "pm.delMacroAllocation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "macroAllocationId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The macro allocation's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Method/{id}": {
			"get": {
				"description": "Returns a project management method",
				"summary": "pm.getPmMethod",
				"operationId": "pm.getPmMethod",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethod"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethod"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethod"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Method/{id}/Phases": {
			"get": {
				"description": "Returns all available phases of a project management method",
				"summary": "pm.getPmMethodPhases",
				"operationId": "pm.getPmMethodPhases",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Method/{id}/WithTranslations": {
			"get": {
				"description": "Returns a project management method",
				"summary": "pm.getPmMethodWithTranslations",
				"operationId": "pm.getPmMethodWithTranslations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTranslated"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTranslated"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTranslated"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Writes a project management method",
				"summary": "pm.putPmMethodWithTranslations",
				"operationId": "pm.putPmMethodWithTranslations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTranslated"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project management method",
				"summary": "pm.delPmMethodWithTranslations",
				"operationId": "pm.delPmMethodWithTranslations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Method/{methodId}/Phase/{phaseId}": {
			"get": {
				"description": "Returns a project management method phase",
				"summary": "pm.getPmMethodPhase",
				"operationId": "pm.getPmMethodPhase",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "methodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					},
					{
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method phase"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Method/{methodId}/Phase/{phaseId}/WithTranslations": {
			"get": {
				"description": "Returns a project management method phase",
				"summary": "pm.getPmMethodPhaseWithTranslations",
				"operationId": "pm.getPmMethodPhaseWithTranslations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "methodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					},
					{
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method phase"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhaseTranslated"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhaseTranslated"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhaseTranslated"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Writes a project management method phase",
				"summary": "pm.putPmMethodPhaseWithTranslations",
				"operationId": "pm.putPmMethodPhaseWithTranslations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "methodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					},
					{
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method phase"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhaseTranslated"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project management method phase",
				"summary": "pm.delPmMethodPhaseWithTranslations",
				"operationId": "pm.delPmMethodPhaseWithTranslations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "methodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					},
					{
						"name": "phaseId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method phase"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Method/{methodId}/PhaseLifecycleAssignments": {
			"get": {
				"description": "Returns the lifecycle states for all phases of a given project management method",
				"summary": "pm.getPmMethodPhaseLifecycleAssignment",
				"operationId": "pm.getPmMethodPhaseLifecycleAssignment",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "methodId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project management method"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Methods": {
			"get": {
				"description": "Returns all available project management methods",
				"summary": "pm.getPmMethods",
				"operationId": "pm.getPmMethods",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethod"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethod"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethod"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Methods/PhaseLifecycleAssignments": {
			"get": {
				"description": "Returns the lifecycle states for all phases of all project management method",
				"summary": "pm.getPmMethodsPhaseLifecycleAssignment",
				"operationId": "pm.getPmMethodsPhaseLifecycleAssignment",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Writes all project management method phase lifecycle assignments",
				"summary": "pm.putPmMethodsPhaseLifecycleAssignment",
				"operationId": "pm.putPmMethodsPhaseLifecycleAssignment",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/pm.ProjectManagementMethodPhaseLifecycleAssignment"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/PortfolioScenario/{pfScenarioId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.getPortfolioScenario",
				"operationId": "pm.getPortfolioScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "pfScenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The portfolio scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.GenericObject"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.GenericObject"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.GenericObject"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.putPortfolioScenario",
				"operationId": "pm.putPortfolioScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "pfScenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The portfolio scenario's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.GenericObject"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.delPortfolioScenario",
				"operationId": "pm.delPortfolioScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "pfScenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The portfolio scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/PortfolioScenarios": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.getPortfolioScenarios",
				"operationId": "pm.getPortfolioScenarios",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.GenericObject"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.GenericObject"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.GenericObject"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/PortfolioScenarios/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.addPortfolioScenario",
				"operationId": "pm.addPortfolioScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/IndicatorSelection/{projectReportTypeId}/Detail/{detid}": {
			"get": {
				"description": "Returns details about a specific, currently selected indicator for a given project",
				"summary": "pm.getIndicatorSelectionDetail",
				"operationId": "pm.getIndicatorSelectionDetail",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "detid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailSelection"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailSelection"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailSelection"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/IndicatorSelection/{projectReportTypeId}/Detail/{detid}/History": {
			"get": {
				"description": "Returns the historic details about a specific, currently selected indicator for a given project",
				"summary": "pm.getIndicatorSelectionDetailHistory",
				"operationId": "pm.getIndicatorSelectionDetailHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "detid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Begin date of the request"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "End date of the request"
					},
					{
						"name": "granularity",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity of the request"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailSelectionHistory"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailSelectionHistory"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorDetailSelectionHistory"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/IndicatorSelection/{projectReportTypeId}/Detail/{detid}/Timeline": {
			"get": {
				"description": "Returns the timeline (timestamps of changes) of details about a specific, currently selected indicator for a given project",
				"summary": "pm.getIndicatorSelectionDetailTimeline",
				"operationId": "pm.getIndicatorSelectionDetailTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "detid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The indicator detail's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Begin date of the request"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "End date of the request"
					},
					{
						"name": "granularity",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The granularity of the request"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Timeline"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Timeline"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Timeline"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/IndicatorSelections/{projectReportTypeId}": {
			"get": {
				"description": "Returns the currently selected indicators for a given project",
				"summary": "pm.getIndicatorSelections",
				"operationId": "pm.getIndicatorSelections",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorSelections"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorSelections"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorSelections"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates the currently selected indicators for a given project",
				"summary": "pm.putIndicatorSelections",
				"operationId": "pm.putIndicatorSelections",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "projectReportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report type"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.IndicatorSelections"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/ManagementMethod": {
			"get": {
				"description": "Returns information about the project management method, its phases and its timing according to the project's lifecycle history",
				"summary": "pm.getProjectManagementMethod",
				"operationId": "pm.getProjectManagementMethod",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethod"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethod"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethod"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/ManagementMethodPhase": {
			"get": {
				"description": "Returns information about the project management method, its phases and its timing according to the project's lifecycle history",
				"summary": "pm.getProjectManagementMethodPhase",
				"operationId": "pm.getProjectManagementMethodPhase",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodPhase"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{id}/ManagementMethodTimeline": {
			"get": {
				"description": "Returns information about the project management method, its phases and its timing according to the project's lifecycle history and active scenario planning",
				"summary": "pm.getProjectManagementMethodTimeline",
				"operationId": "pm.getProjectManagementMethodTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTimeline"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTimeline"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTimeline"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}": {
			"get": {
				"description": "Returns a project",
				"summary": "pm.getProject",
				"operationId": "pm.getProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates or creates a project",
				"summary": "pm.putProject",
				"operationId": "pm.putProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project",
				"summary": "pm.delProject",
				"operationId": "pm.delProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/AccumulatedValues": {
			"get": {
				"description": "Returns the accumulated values for each phase of a scenario",
				"summary": "pm.getProjectAccumulatedValues",
				"operationId": "pm.getProjectAccumulatedValues",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "A time range (begin, inclusive) to filter costs and allocations"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "A time range (end, exclusive) to filter costs and allocations"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/ActiveScenario": {
			"get": {
				"description": "Returns the current active scenario for a given project",
				"summary": "pm.getProjectActiveScenario",
				"operationId": "pm.getProjectActiveScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "singleinactive",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Handle a single inactive scenario as active, too"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/ActiveScenario/History": {
			"get": {
				"description": "Returns the historic active scenario IDs for a given project",
				"summary": "pm.getProjectActiveScenarioHistory",
				"operationId": "pm.getProjectActiveScenarioHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "singleinactive",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Handle a single inactive scenario as active, too"
					},
					{
						"name": "until",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Limit for the history to be returned"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.ItemTimeline"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.ItemTimeline"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.ItemTimeline"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/AddReport/{reportType}": {
			"post": {
				"description": "Adds a new project report to a project",
				"summary": "pm.addProjectReport",
				"operationId": "pm.addProjectReport",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					},
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of a report to be used as template"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Currency that will be used to calculate and store report (null uses user's default currency)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/AddScenario": {
			"post": {
				"description": "Adds a new scenario to a project",
				"summary": "pm.addProjectScenario",
				"operationId": "pm.addProjectScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "copy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Specifies a source scenario to be copied, otherwise the template scenario is used"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Classification": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.getProjectClassification",
				"operationId": "pm.getProjectClassification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/cls.Classification"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/cls.Classification"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/cls.Classification"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.putProjectClassification",
				"operationId": "pm.putProjectClassification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/cls.Classification"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Details": {
			"get": {
				"description": "Returns a project (details interface)",
				"summary": "pm.getProjectDetails",
				"operationId": "pm.getProjectDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates or creates a project (details interface)",
				"summary": "pm.putProjectDetails",
				"operationId": "pm.putProjectDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Identification": {
			"get": {
				"description": "Returns identifying members (name, description, icon) of a project",
				"summary": "pm.getProjectIdentification",
				"operationId": "pm.getProjectIdentification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/lcy.ItemWithLifecycle"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/lcy.ItemWithLifecycle"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/lcy.ItemWithLifecycle"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/LatestReport/{reportType}": {
			"get": {
				"description": "Returns the latest report of a project (with one of the given states, if desired)",
				"summary": "pm.getLatestProjectReport",
				"operationId": "pm.getLatestProjectReport",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The states that should be considered to identify the latest report"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/LinkTo": {
			"post": {
				"description": "Moves a project from one portfolio to another",
				"summary": "pm.linkProject",
				"operationId": "pm.linkProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "portfolio",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio ID to which the project shopuld be linked (required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Moves a project from one portfolio to another",
				"summary": "pm.unlinkProject",
				"operationId": "pm.unlinkProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "portfolio",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio ID to which the project shopuld be linked (required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/MoveTo": {
			"post": {
				"description": "Moves a project from one portfolio to another",
				"summary": "pm.moveProject",
				"operationId": "pm.moveProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "fromPortfolio",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio ID from which to move (required)"
					},
					{
						"name": "toPortfolio",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The portfolio ID to move to (required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Reports": {
			"get": {
				"description": "Returns all project reports of a given project",
				"summary": "pm.getProjectReports",
				"operationId": "pm.getProjectReports",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "reporttype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The project report types that should be included (omit to include all)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Reports/{reportType}": {
			"get": {
				"description": "Returns all project reports of a given project",
				"summary": "pm.getProjectReportsByType",
				"operationId": "pm.getProjectReportsByType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Scenarios": {
			"get": {
				"description": "Returns all scenarios of a project",
				"summary": "pm.getProjectScenarios",
				"operationId": "pm.getProjectScenarios",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectScenario"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectScenario"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectScenario"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/SubObject/{subObjectType}": {
			"get": {
				"description": "Returns all sub objects for a given project (that the user is permitted to READ)",
				"summary": "pm.getProjectSubObj",
				"operationId": "pm.getProjectSubObj",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "subObjectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The sub object's type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.SubObject"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.SubObject"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.SubObject"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Returns all sub objects for a given project (that the user is permitted to READ)",
				"summary": "pm.putProjectSubObj",
				"operationId": "pm.putProjectSubObj",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "subObjectType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The sub object's type"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.SubObject"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/SubObjects": {
			"get": {
				"description": "Returns all sub objects for a given project (that the user is permitted to READ)",
				"summary": "pm.getProjectSubObjs",
				"operationId": "pm.getProjectSubObjs",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.SubObject"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.SubObject"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.SubObject"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/Summary": {
			"get": {
				"description": "Returns the latest report of a project (with one of the given states, if desired)",
				"summary": "pm.getProjectSummary",
				"operationId": "pm.getProjectSummary",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					},
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The states that should be considered to identify the latest report"
					},
					{
						"name": "reporttype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The project report types that should be included (omit to include all)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectSummary"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectSummary"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectSummary"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Project/{projectId}/UploadScenario": {
			"post": {
				"description": "Adds a new scenario to a project by uploading a project file (MS Project, MPX, XML, ...)",
				"summary": "pm.uploadProjectScenario",
				"operationId": "pm.uploadProjectScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"*/*"
				],
				"parameters": [
					{
						"name": "projectId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project's ID"
					},
					{
						"name": "format",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The file format to bypass auto detection"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"*/*"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectGuideline/{guidelineId}": {
			"get": {
				"description": "Returns a specific project guideline",
				"summary": "pm.getProjectGuideline",
				"operationId": "pm.getProjectGuideline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "guidelineId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project guideline's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectGuideline"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectGuideline"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectGuideline"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectGuidelines": {
			"get": {
				"description": "Returns all possible project guidelines",
				"summary": "pm.getProjectGuidelines",
				"operationId": "pm.getProjectGuidelines",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectGuideline"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectGuideline"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectGuideline"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}": {
			"get": {
				"description": "Returns a specific project portfolio",
				"summary": "pm.getProjectPortfolio",
				"operationId": "pm.getProjectPortfolio",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolio"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolio"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolio"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a specific project portfolio",
				"summary": "pm.putProjectPortfolio",
				"operationId": "pm.putProjectPortfolio",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolio"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a specific project portfolio",
				"summary": "pm.delProjectPortfolio",
				"operationId": "pm.delProjectPortfolio",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/Milestone/{milestoneId}": {
			"get": {
				"description": "Returns a specific project portfolio milestone",
				"summary": "pm.getProjectPortfolioMilestone",
				"operationId": "pm.getProjectPortfolioMilestone",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "milestoneId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio milestone ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a specific project portfolio milestone",
				"summary": "pm.putProjectPortfolioMilestone",
				"operationId": "pm.putProjectPortfolioMilestone",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "milestoneId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio milestone ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a specific project portfolio milestone",
				"summary": "pm.delProjectPortfolioMilestone",
				"operationId": "pm.delProjectPortfolioMilestone",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "milestoneId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio milestone ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/Milestones": {
			"get": {
				"description": "Returns all milestones of a portfolio",
				"summary": "pm.getProjectPortfolioMilestones",
				"operationId": "pm.getProjectPortfolioMilestones",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "includeparent",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Include also milestones of parent project portfolios"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolioMilestone"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/Milestones/Add": {
			"post": {
				"description": "Adds a new milestone to aportfolio",
				"summary": "pm.addProjectPortfolioMilestone",
				"operationId": "pm.addProjectPortfolioMilestone",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "at",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "The point in time the new milestone should be placed"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/MoveTo": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.moveProjectPortfolio",
				"operationId": "pm.moveProjectPortfolio",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					},
					{
						"name": "portfolio",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The destination portfolio (required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/MoveToTop": {
			"post": {
				"description": "Moves a project portfolio to the top (the PM module)",
				"summary": "pm.moveProjectPortfolioToTop",
				"operationId": "pm.moveProjectPortfolioToTop",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/Projects": {
			"get": {
				"description": "Returns all projects that are part of a specific project portfolio",
				"summary": "pm.getProjectPortfolioProjects",
				"operationId": "pm.getProjectPortfolioProjects",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/Projects/Add": {
			"post": {
				"description": "Adds a new project to a project portfolio",
				"summary": "pm.addProjectPortfolioProject",
				"operationId": "pm.addProjectPortfolioProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/SubPortfolios": {
			"get": {
				"description": "Returns all project portfolios that are part of a specific project portfolio",
				"summary": "pm.getProjectPortfolioSubPortfolios",
				"operationId": "pm.getProjectPortfolioSubPortfolios",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolio"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolio"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolio"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolio/{portfolioId}/SubPortfolios/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.addProjectPortfolioSubPortfolio",
				"operationId": "pm.addProjectPortfolioSubPortfolio",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "portfolioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "the project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolios": {
			"get": {
				"description": "Returns all main project portfolios",
				"summary": "pm.getProjectPortfolios",
				"operationId": "pm.getProjectPortfolios",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolio"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolio"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectPortfolio"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectPortfolios/Add": {
			"post": {
				"description": "Adds a new project portfolio to the PM root",
				"summary": "pm.addProjectPortfolio",
				"operationId": "pm.addProjectPortfolio",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectReport/{reportType}/{reportId}": {
			"get": {
				"description": "Returns the project report with the given ID",
				"summary": "pm.getProjectReport",
				"operationId": "pm.getProjectReport",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					},
					{
						"name": "reportId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's ID"
					},
					{
						"name": "recalculate",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Flag to trigger recalculation while loading (will not be stored automatically)"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Currency that will be used for recalculation (only used, if recalculate=1; null uses user's default currency)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Returns the project report with the given ID",
				"summary": "pm.putProjectReport",
				"operationId": "pm.putProjectReport",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					},
					{
						"name": "reportId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Currency that will be used to calculate and store report (null uses user's default currency)"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReport"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Returns the project report with the given ID",
				"summary": "pm.delProjectReport",
				"operationId": "pm.delProjectReport",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					},
					{
						"name": "reportId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectReports/{reportType}": {
			"get": {
				"description": "Returns all project reports",
				"summary": "pm.getAllProjectReports",
				"operationId": "pm.getAllProjectReports",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project report's type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReport"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectReportType/{reportTypeId}": {
			"get": {
				"description": "Returns a project report type",
				"summary": "pm.getProjectReportType",
				"operationId": "pm.getProjectReportType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project report type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReportType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReportType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReportType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a project report type",
				"summary": "pm.putProjectReportType",
				"operationId": "pm.putProjectReportType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project report type"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectReportType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project report type",
				"summary": "pm.delProjectReportType",
				"operationId": "pm.delProjectReportType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "reportTypeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of the project report type"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectReportTypes": {
			"get": {
				"description": "Returns a project report type by its ID",
				"summary": "pm.getProjectReportTypes",
				"operationId": "pm.getProjectReportTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReportType"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReportType"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectReportType"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Projects": {
			"get": {
				"description": "Returns a project",
				"summary": "pm.getProjects",
				"operationId": "pm.getProjects",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Projects/Identification": {
			"get": {
				"description": "Returns identifying members (name, description, icon) of a project",
				"summary": "pm.getProjectIdentifications",
				"operationId": "pm.getProjectIdentifications",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.ItemWithLifecycle"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.ItemWithLifecycle"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/lcy.ItemWithLifecycle"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Projects/WithActiveScenario": {
			"get": {
				"description": "Returns the latest report of a project (with one of the given states, if desired)",
				"summary": "pm.getProjectsWithActiveScenario",
				"operationId": "pm.getProjectsWithActiveScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "singleinactive",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Handle a single inactive scenario as active, too"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Projects/WithLatestReports": {
			"get": {
				"description": "Returns all projects with their latest report (with one of the given states, if desired)",
				"summary": "pm.getAllProjectsWithLatestReports",
				"operationId": "pm.getAllProjectsWithLatestReports",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "state",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The states that should be considered to identify the latest report"
					},
					{
						"name": "reporttype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The project report types that should be included (omit to include all)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWithReports"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWithReports"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWithReports"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/Projects/WithMissingReport": {
			"get": {
				"description": "Returns all projects that do not have a report about the latest reporting interval",
				"summary": "pm.getProjectsWithMissingReport",
				"operationId": "pm.getProjectsWithMissingReport",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectstate",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "A project state to filter projects"
					},
					{
						"name": "reportstate",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Requires the reports to be in a specific state"
					},
					{
						"name": "reporttype",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The project report types that should be included (omit to include all)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.Project"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{id}/ManagementMethodTimeline": {
			"get": {
				"description": "Returns information about the project management method of a scenario, its phases and its timing according to the project's lifecycle history and scenario planning",
				"summary": "pm.getProjectScenarioManagementMethodTimeline",
				"operationId": "pm.getProjectScenarioManagementMethodTimeline",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTimeline"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTimeline"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectManagementMethodTimeline"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}": {
			"get": {
				"description": "Returns a specific project scenario",
				"summary": "pm.getProjectScenario",
				"operationId": "pm.getProjectScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates or creates a project scenario",
				"summary": "pm.putProjectScenario",
				"operationId": "pm.putProjectScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectScenario"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a project scenario",
				"summary": "pm.delProjectScenario",
				"operationId": "pm.delProjectScenario",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/AccumulatedValues": {
			"get": {
				"description": "Returns the accumulated values for each phase of a scenario",
				"summary": "pm.getScenarioAccumulatedValues",
				"operationId": "pm.getScenarioAccumulatedValues",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "A time range (begin, inclusive) to filter costs and allocations"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "A time range (end, exclusive) to filter costs and allocations"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/Constraint/{constraintId}": {
			"get": {
				"description": "Returns a certain project constraint by its ID",
				"summary": "pm.getProjectConstraint",
				"operationId": "pm.getProjectConstraint",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "constraintId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project constraint's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectConstraint"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectConstraint"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectConstraint"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Stores a certain project constraint by its ID",
				"summary": "pm.putProjectConstraint",
				"operationId": "pm.putProjectConstraint",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "constraintId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project constraint's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectConstraint"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes a certain project constraint by its ID",
				"summary": "pm.delProjectConstraint",
				"operationId": "pm.delProjectConstraint",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "constraintId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project constraint's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/Constraints": {
			"get": {
				"description": "Returns a certain project constraint by its ID",
				"summary": "pm.getProjectConstraints",
				"operationId": "pm.getProjectConstraints",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "predecessorId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the milestone on source side"
					},
					{
						"name": "successorId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the milestone on target side"
					},
					{
						"name": "milestoneId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of the milestone on any side"
					},
					{
						"name": "workItemId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The ID of a work item involved"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectConstraint"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectConstraint"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectConstraint"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/Details": {
			"get": {
				"description": "Returns a specific project scenario",
				"summary": "pm.getProjectScenarioDetails",
				"operationId": "pm.getProjectScenarioDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates or creates a project scenario",
				"summary": "pm.putProjectScenarioDetails",
				"operationId": "pm.putProjectScenarioDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/Download": {
			"get": {
				"description": "Exports a specific project scenario into different file formats",
				"summary": "pm.downloadProjectScenario",
				"operationId": "pm.downloadProjectScenario",
				"deprecated": false,
				"produces": [
					"teststring"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "format",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired file format (required), Possible values: mpx, mspdi, xml, pm"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/MacroAllocations": {
			"get": {
				"description": "Returns all macro allocations of a specific project scenario",
				"summary": "pm.getProjectScenarioMacroAllocations",
				"operationId": "pm.getProjectScenarioMacroAllocations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MacroAllocation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MacroAllocation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MacroAllocation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectScenario/{scenarioId}/WorkItems": {
			"get": {
				"description": "Returns the work items (phases) of a scenario",
				"summary": "pm.getScenarioWorkItems",
				"operationId": "pm.getScenarioWorkItems",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "scenarioId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project scenario's ID"
					},
					{
						"name": "tree",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Sorted as tree"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}": {
			"get": {
				"description": "Returns a project work item",
				"summary": "pm.getWorkItem",
				"operationId": "pm.getWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates a project wor item",
				"summary": "pm.putWorkItem",
				"operationId": "pm.putWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "updateDependencies",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Update dependencies to other work items"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Updates a project wor item",
				"summary": "pm.delWorkItem",
				"operationId": "pm.delWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/AddChild": {
			"post": {
				"description": "Adds a new child work item to a work item (providing a template)",
				"summary": "pm.addWorkItemSubWorkItem",
				"operationId": "pm.addWorkItemSubWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ProjectWorkItem"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Children": {
			"get": {
				"description": "Returns the child work items of a work item",
				"summary": "pm.getWorkItemSubWorkItems",
				"operationId": "pm.getWorkItemSubWorkItems",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItem"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItem"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.ProjectWorkItem"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Copy": {
			"post": {
				"description": "Copies a work item and attaches it to a another or the same parent task",
				"summary": "pm.copyWorkItemTree",
				"operationId": "pm.copyWorkItemTree",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "targetId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The new parent task (or the same if omitted)"
					},
					{
						"name": "sortIndex",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The new position index (stays the same, if omitted)"
					},
					{
						"name": "includeLogs",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy logs"
					},
					{
						"name": "includeDocumentLinks",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy document links"
					},
					{
						"name": "includeShiftPlans",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy shift plans"
					},
					{
						"name": "includeDependencies",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy dependencies"
					},
					{
						"name": "includeAllocations",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy allocations"
					},
					{
						"name": "includePlannedCosts",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy planned costs"
					},
					{
						"name": "includeTodoLinks",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy todo links"
					},
					{
						"name": "includeTodos",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Copy todos"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/DelMicroAllocations": {
			"post": {
				"description": "Deletes all micro allocations of a specific work item on a specific resource",
				"summary": "pm.delMicroAllocations",
				"operationId": "pm.delMicroAllocations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "res",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The resource's ID (required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/End/Move": {
			"post": {
				"description": "Moves a work item end in the timeline",
				"summary": "pm.moveWorkItemEnd",
				"operationId": "pm.moveWorkItemEnd",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "to",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day where the work item should end"
					},
					{
						"name": "strategy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Describes how other work items react to the movement"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/End/MovePattern": {
			"get": {
				"description": "Calculates how other work items behave in reaction to a movement of a given work item' end",
				"summary": "pm.getMovePatternByWorkItemEnd",
				"operationId": "pm.getMovePatternByWorkItemEnd",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "strategy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Describes how other work items react to the movement"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Log/{logId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.getWorkItemLog",
				"operationId": "pm.getWorkItemLog",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "logId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The log's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Log"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Log"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Log"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.putWorkItemLog",
				"operationId": "pm.putWorkItemLog",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "logId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The log's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.Log"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.delWorkItemLog",
				"operationId": "pm.delWorkItemLog",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "logId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The log's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Logs": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "pm.getWorkItemLogs",
				"operationId": "pm.getWorkItemLogs",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Log"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Log"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Log"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/MacroAllocations": {
			"get": {
				"description": "Returns the macro allocations of a specific work item",
				"summary": "pm.getWorkItemMacroAllocations",
				"operationId": "pm.getWorkItemMacroAllocations",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MacroAllocation"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MacroAllocation"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MacroAllocation"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/MacroAllocations/Add": {
			"post": {
				"description": "Adds a new macro allocation to a work item",
				"summary": "pm.addWorkItemMacroAllocation",
				"operationId": "pm.addWorkItemMacroAllocation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "argid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The resource ID the macro allocation should be linked to (required)"
					},
					{
						"name": "amount",
						"in": "query",
						"required": false,
						"type": "number",
						"format": "double",
						"description": "The amount"
					},
					{
						"name": "amountUnit",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The unit of the amount"
					},
					{
						"name": "amountType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "What the amount is related to (ABSOLUTE, OF_CAPACITY, OF_AVAILABILITY, OF_FTE, OF_PHASE)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/MacroAllocations/Delete": {
			"delete": {
				"description": "Adds a new macro allocation to a work item",
				"summary": "pm.delWorkItemMacroAllocation",
				"operationId": "pm.delWorkItemMacroAllocation",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "refid",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The resource ID whose macro allocation should be deleted (required)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Move": {
			"post": {
				"description": "Moves a work item in the timeline",
				"summary": "pm.moveWorkItem",
				"operationId": "pm.moveWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "to",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day where the work item should start"
					},
					{
						"name": "strategy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Describes how other work items react to the movement"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/MovePattern": {
			"get": {
				"description": "Calculates how other work items behave in reaction to a movement of a given work item",
				"summary": "pm.getMovePatternByWorkItem",
				"operationId": "pm.getMovePatternByWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "strategy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Describes how other work items react to the movement"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Project": {
			"get": {
				"description": "Returns the project a specific work item belongs to",
				"summary": "pm.getWorkItemProject",
				"operationId": "pm.getWorkItemProject",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.Project"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/ShiftPlan": {
			"get": {
				"description": "Returns the planned shifts for a specific work item",
				"summary": "pm.getWorkItemShiftPlan",
				"operationId": "pm.getWorkItemShiftPlan",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pm.ShiftPlan"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pm.ShiftPlan"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pm.ShiftPlan"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Updates the planned shifts for a specific work item",
				"summary": "pm.putWorkItemShiftPlan",
				"operationId": "pm.putWorkItemShiftPlan",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pm.ShiftPlan"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Deletes the planned shifts for a specific work item",
				"summary": "pm.delWorkItemShiftPlan",
				"operationId": "pm.delWorkItemShiftPlan",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/ShiftPlan/Assign": {
			"post": {
				"description": "Assigns the planned shifts of a specific work item to a resource",
				"summary": "pm.assignWorkItemShiftPlan",
				"operationId": "pm.assignWorkItemShiftPlan",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "res",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The resource's ID (required)"
					},
					{
						"name": "force",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Forces the assignment and overwrites existing reservations"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Split": {
			"post": {
				"description": "Splits a work item into two pieces",
				"summary": "pm.splitWorkItem",
				"operationId": "pm.splitWorkItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project work item's ID"
					},
					{
						"name": "at",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "The point in time where the phase should be split (required, will be rounded to nex midnight)"
					},
					{
						"name": "splitsubtasks",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Split also descendants that overlap the split position"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Start/Move": {
			"post": {
				"description": "Moves a work item start in the timeline",
				"summary": "pm.moveWorkItemStart",
				"operationId": "pm.moveWorkItemStart",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "to",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day where the work item should start"
					},
					{
						"name": "strategy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Describes how other work items react to the movement"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/PM/ProjectWorkItem/{workItemId}/Start/MovePattern": {
			"get": {
				"description": "Calculates how other work items behave in reaction to a movement of a given work item's start",
				"summary": "pm.getMovePatternByWorkItemStart",
				"operationId": "pm.getMovePatternByWorkItemStart",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "workItemId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The work item's ID"
					},
					{
						"name": "strategy",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Describes how other work items react to the movement"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pm.MovePattern"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/HolidayLocale/{locid}": {
			"get": {
				"description": "",
				"summary": "res.getHolidayLocaleObj",
				"operationId": "res.getHolidayLocaleObj",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "",
				"summary": "res.putHolidayLocaleObj",
				"operationId": "res.putHolidayLocaleObj",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "res.delHolidayLocale",
				"operationId": "res.delHolidayLocale",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/HolidayLocale/{locid}/Details": {
			"get": {
				"description": "",
				"summary": "res.getHolidayLocaleDetails",
				"operationId": "res.getHolidayLocaleDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "",
				"summary": "res.putHolidayLocaleDetails",
				"operationId": "res.putHolidayLocaleDetails",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/HolidayLocale/{locid}/Holiday/{holid}": {
			"get": {
				"description": "Returns a single holiday of a holiday locale",
				"summary": "res.getHoliday",
				"operationId": "res.getHoliday",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale ID"
					},
					{
						"name": "holid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.Holiday"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.Holiday"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.Holiday"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Returns a single holiday of a holiday locale",
				"summary": "res.putHoliday",
				"operationId": "res.putHoliday",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale ID"
					},
					{
						"name": "holid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/res.Holiday"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Returns a single holiday of a holiday locale",
				"summary": "res.delHoliday",
				"operationId": "res.delHoliday",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale ID"
					},
					{
						"name": "holid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/HolidayLocale/{locid}/Holidays": {
			"get": {
				"description": "Returns all holidays of a holiday locale",
				"summary": "res.getHolidays",
				"operationId": "res.getHolidays",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "locid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The holiday locale"
					},
					{
						"name": "beg",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The first day of the range that should be retrieved"
					},
					{
						"name": "end",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "The day after the last day of the range that should be retrieved"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.Holiday"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.Holiday"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.Holiday"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/HolidayLocales": {
			"get": {
				"description": "",
				"summary": "res.getHolidayLocales",
				"operationId": "res.getHolidayLocales",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/HolidayLocales/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "res.addHolidayLocale",
				"operationId": "res.addHolidayLocale",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "copyFromId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Locale ID to create a copy from"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{fromId}/AddLink": {
			"post": {
				"description": "Add link to the given resource",
				"summary": "res.addResourceLink",
				"operationId": "res.addResourceLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "fromId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The from resource's ID"
					},
					{
						"name": "linkType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The  link type ID"
					},
					{
						"name": "toId",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The to resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{parentResourceId}/AddChild": {
			"post": {
				"description": "Adds a new resource to the given parent an link type",
				"summary": "res.addResourceChild",
				"operationId": "res.addResourceChild",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "parentResourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The parent resource's ID"
					},
					{
						"name": "linkType",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The link type to use to add a child"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}": {
			"get": {
				"description": "Read and return a resource by it's ID",
				"summary": "res.getResource",
				"operationId": "res.getResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.Resource"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.Resource"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.Resource"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Update/create a resource",
				"summary": "res.putResource",
				"operationId": "res.putResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/res.Resource"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Delete a resource",
				"summary": "res.delResource",
				"operationId": "res.delResource",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/Ancestors": {
			"get": {
				"description": "Read resource's ancestors",
				"summary": "res.getResourceAncestors",
				"operationId": "res.getResourceAncestors",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.VersionedDetails"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.VersionedDetails"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.VersionedDetails"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/Availabilities": {
			"get": {
				"description": "Read resource's availabilities",
				"summary": "res.getAvailabilities",
				"operationId": "res.getAvailabilities",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.Availability"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.Availability"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.Availability"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/Availability": {
			"get": {
				"description": "Read resource's calculated availability",
				"summary": "res.calculateAvailability",
				"operationId": "res.calculateAvailability",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "begDate",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "Begin date for calculation"
					},
					{
						"name": "endDate",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date",
						"description": "End date for calculation"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.ResourceAvailability"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.ResourceAvailability"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.ResourceAvailability"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/Availability/{availabilityId}": {
			"get": {
				"description": "Read resource's availability by ID",
				"summary": "res.getAvailability",
				"operationId": "res.getAvailability",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "availabilityId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The availability's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.Availability"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.Availability"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.Availability"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Update/create a resource's availability by ID",
				"summary": "res.putAvailability",
				"operationId": "res.putAvailability",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "availabilityId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The availability's ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/res.Availability"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Delete a resource's availability by ID",
				"summary": "res.delAvailability",
				"operationId": "res.delAvailability",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					},
					{
						"name": "availabilityId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The availability's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/Children": {
			"get": {
				"description": "Read resource's children",
				"summary": "res.getResourceChildren",
				"operationId": "res.getResourceChildren",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.VersionedDetails"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.VersionedDetails"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.VersionedDetails"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/ChildrenIdentification": {
			"get": {
				"description": "Read resource's children's identification",
				"summary": "res.getResourceChildrenIdentification",
				"operationId": "res.getResourceChildrenIdentification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resource/{resourceId}/Identification": {
			"get": {
				"description": "Read resource identification by it's ID",
				"summary": "res.getResourceIdentification",
				"operationId": "res.getResourceIdentification",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resourceId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.ItemWithAncestors"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.ItemWithAncestors"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.ItemWithAncestors"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroup/{groupId}": {
			"get": {
				"description": "",
				"summary": "res.getResourceGroup",
				"operationId": "res.getResourceGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource group's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.ResourceGroup"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.ResourceGroup"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.ResourceGroup"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroup/{groupId}/Resources": {
			"get": {
				"description": "",
				"summary": "res.getResourcesByGroup",
				"operationId": "res.getResourcesByGroup",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource group's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroup/{groupId}/WorktimeUnitFactors": {
			"get": {
				"description": "",
				"summary": "res.getResourceGroupWorktimeUnitFactors",
				"operationId": "res.getResourceGroupWorktimeUnitFactors",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource group's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.UnitFactor"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroup/{groupId}/WorktimeUnits": {
			"get": {
				"description": "",
				"summary": "res.getResourceGroupWorktimeUnits",
				"operationId": "res.getResourceGroupWorktimeUnits",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource group's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Unit"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Unit"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Unit"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroup/{resgrpid}/StandardWorktime": {
			"put": {
				"description": "Updates the standard worktime for a given resource group",
				"summary": "res.putResourceGroupStandardWorktime",
				"operationId": "res.putResourceGroupStandardWorktime",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "resgrpid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource group ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/res.ResourceGroupStandardWorktime"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroups": {
			"get": {
				"description": "",
				"summary": "res.getResourceGroups",
				"operationId": "res.getResourceGroups",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceGroup"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceGroup"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceGroup"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceGroups/StandardWorktimes": {
			"get": {
				"description": "Returns standard worktimes for all resource groups",
				"summary": "res.getResourceGroupStandardWorktimes",
				"operationId": "res.getResourceGroupStandardWorktimes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceGroupStandardWorktime"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceGroupStandardWorktime"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceGroupStandardWorktime"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceKind/{kindId}": {
			"get": {
				"description": "",
				"summary": "res.getResourceKind",
				"operationId": "res.getResourceKind",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "kindId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource kind's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.NamedReference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.NamedReference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.NamedReference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceKind/{kindId}/Resources": {
			"get": {
				"description": "",
				"summary": "res.getResourcesByKind",
				"operationId": "res.getResourcesByKind",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "kindId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource kind's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceKinds": {
			"get": {
				"description": "",
				"summary": "res.getResourceKinds",
				"operationId": "res.getResourceKinds",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.NamedReference"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceKinds/{kindIds}/Resources": {
			"get": {
				"description": "",
				"summary": "res.getResourcesByKinds",
				"operationId": "res.getResourcesByKinds",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "kindIds",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource kind's IDs"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceLink/{linkType}/{linkId}": {
			"get": {
				"description": "",
				"summary": "res.getResourceLink",
				"operationId": "res.getResourceLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "linkType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The  link type ID"
					},
					{
						"name": "linkId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The  linked resource ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Details"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "",
				"summary": "res.putResourceLink",
				"operationId": "res.putResourceLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "linkType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The  link type ID"
					},
					{
						"name": "linkId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The  linked resource ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/pf.VersionedDetails"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "",
				"summary": "res.delResourceLink",
				"operationId": "res.delResourceLink",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "linkType",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The  link type ID"
					},
					{
						"name": "linkId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The  linked resource ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resources": {
			"get": {
				"description": "Read all resources of any resource type",
				"summary": "res.getResources",
				"operationId": "res.getResources",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/Resources/ResourceHierarchy": {
			"get": {
				"description": "Read all resources of any resource type",
				"summary": "res.getResourceHierarchy",
				"operationId": "res.getResourceHierarchy",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceShift/{id}": {
			"get": {
				"description": "",
				"summary": "res.getResourceShift",
				"operationId": "res.getResourceShift",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource shift's ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.ResourceShift"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.ResourceShift"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.ResourceShift"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceShifts": {
			"get": {
				"description": "",
				"summary": "res.getResourceShifts",
				"operationId": "res.getResourceShifts",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceShift"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceShift"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceShift"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceType/{typeId}": {
			"get": {
				"description": "",
				"summary": "res.getResourceType",
				"operationId": "res.getResourceType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/res.ResourceType"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/res.ResourceType"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/res.ResourceType"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceType/{typeId}/ResourceHierarchy": {
			"get": {
				"description": "",
				"summary": "res.getResourceHierarchyByType",
				"operationId": "res.getResourceHierarchyByType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ItemWithAncestors"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceType/{typeId}/Resources": {
			"get": {
				"description": "",
				"summary": "res.getResourcesByType",
				"operationId": "res.getResourcesByType",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "typeId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The resource's type ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RES/ResourceTypes": {
			"get": {
				"description": "",
				"summary": "res.getResourceTypes",
				"operationId": "res.getResourceTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceType"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceType"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/res.ResourceType"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/Project/{prjid}/Risk/{riskId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectRisk",
				"operationId": "rsk.getProjectRisk",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "riskId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project risk ID"
					},
					{
						"name": "version",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Retrieve a historic version (current version, if not specified)"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.putProjectRisk",
				"operationId": "rsk.putProjectRisk",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "riskId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project risk ID"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"delete": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.delProjectRisk",
				"operationId": "rsk.delProjectRisk",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "riskId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project risk ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/Project/{prjid}/Risk/{riskId}/WithHistory/{history}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectRiskWithHistory",
				"operationId": "rsk.getProjectRiskWithHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "riskId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project risk ID"
					},
					{
						"name": "history",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The size of the history that should be retrieved"
					},
					{
						"name": "version",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Retrieve a historic version (current version, if not specified)"
					},
					{
						"name": "simplify",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Reduces the history entries by combining entries that are close to each other"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/Project/{prjid}/Risks": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectRisks",
				"operationId": "rsk.getProjectRisks",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "version",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Retrieve a historic version (current version, if not specified)"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/Project/{prjid}/Risks/Add": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.addProjectRisk",
				"operationId": "rsk.addProjectRisk",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Reference"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/Project/{prjid}/Risks/WithHistory/{history}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectRisksWithHistory",
				"operationId": "rsk.getProjectRisksWithHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "prjid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "history",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The size of the history that should be retrieved"
					},
					{
						"name": "version",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Retrieve a historic version (current version, if not specified)"
					},
					{
						"name": "simplify",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Reduces the history entries by combining entries that are close to each other"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/ProjectPortfolio/{ppfid}/Risks": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectPortfolioRisks",
				"operationId": "rsk.getProjectPortfolioRisks",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "version",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Retrieve a historic version (current version, if not specified)"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/ProjectPortfolio/{ppfid}/Risks/WithHistory/{history}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectPortfolioRisksWithHistory",
				"operationId": "rsk.getProjectPortfolioRisksWithHistory",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ppfid",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project portfolio ID"
					},
					{
						"name": "history",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The size of the history that should be retrieved"
					},
					{
						"name": "version",
						"in": "query",
						"required": false,
						"type": "string",
						"format": "date-time",
						"description": "Retrieve a historic version (current version, if not specified)"
					},
					{
						"name": "simplify",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "Reduces the history entries by combining entries that are close to each other"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRiskWithHistory"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/ProjectRisk/{riskId}": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getProjectRiskById",
				"operationId": "rsk.getProjectRiskById",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "riskId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The project risk ID"
					},
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/rsk.ProjectRisk"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/ProjectRisks": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getAllProjectRisks",
				"operationId": "rsk.getAllProjectRisks",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "currency",
						"in": "query",
						"required": false,
						"type": "string",
						"description": "The desired currency to have all money values converted into (except the report which is not recalculated)"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/rsk.ProjectRisk"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/RiskMatrix/Calculate": {
			"post": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.calculateRisk",
				"operationId": "rsk.calculateRisk",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"$ref": "#/definitions/rsk.RiskRating"
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/rsk.RiskRating"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/rsk.RiskRating"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/rsk.RiskRating"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/RSK/RiskMatrix/Definition": {
			"get": {
				"description": "Availability of this endpoint depends on licensed features and may not be available, see return code 402",
				"summary": "rsk.getRiskMatrixDefinition",
				"operationId": "rsk.getRiskMatrixDefinition",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/rsk.RiskMatrixDefinition"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/rsk.RiskMatrixDefinition"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/rsk.RiskMatrixDefinition"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/TDP/ReferenceTypes": {
			"get": {
				"description": "Returns information about all types of PQFORCE objects which have third party references",
				"summary": "tdp.getReferenceTypes",
				"operationId": "tdp.getReferenceTypes",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceType"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceType"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceType"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/TDP/{type}/ForeignItem/{foreignKey}": {
			"get": {
				"description": "Gets references between PQFORCE objects and third party objects",
				"summary": "tdp.getForeignItem",
				"operationId": "tdp.getForeignItem",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					},
					{
						"name": "foreignKey",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The Reference ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/pf.Item"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/TDP/{type}/ForeignItems": {
			"get": {
				"description": "Gets references between PQFORCE objects and third party objects",
				"summary": "tdp.getForeignItems",
				"operationId": "tdp.getForeignItems",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/pf.Item"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/TDP/{type}/Reference/{internalId}": {
			"get": {
				"description": "Gets references between PQFORCE objects and third party objects",
				"summary": "tdp.getReference",
				"operationId": "tdp.getReference",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of PQFORCE objects"
					},
					{
						"name": "internalId",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The Reference ID"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"$ref": "#/definitions/tdp.ThirdPartyReferenceWithOwnData"
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"$ref": "#/definitions/tdp.ThirdPartyReferenceWithOwnData"
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"$ref": "#/definitions/tdp.ThirdPartyReferenceWithOwnData"
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/TDP/{type}/References": {
			"get": {
				"description": "Gets references between PQFORCE objects and third party objects",
				"summary": "tdp.getReferences",
				"operationId": "tdp.getReferences",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of PQFORCE objects"
					},
					{
						"name": "assigned",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Return objects with assignments"
					},
					{
						"name": "unassigned",
						"in": "query",
						"required": false,
						"type": "integer",
						"format": "int32",
						"description": "Return objects without assignments"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceWithOwnData"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceWithOwnData"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceWithOwnData"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		},
		"/API/V2/TDP/{type}/{id}/ForeignKeyAssignments": {
			"get": {
				"description": "Gets all third party references a PQFORCE object has",
				"summary": "tdp.getForeignKeyAssignments",
				"operationId": "tdp.getForeignKeyAssignments",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of PQFORCE object"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of PQFORCE's object"
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceAssignment"
							}
						},
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceAssignment"
							}
						},
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"schema": {
							"type": "array",
							"default": "",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceAssignment"
							}
						},
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			},
			"put": {
				"description": "Puts all third party references a PQFORCE object has",
				"summary": "tdp.putForeignKeyAssignments",
				"operationId": "tdp.putForeignKeyAssignments",
				"deprecated": false,
				"produces": [
					"application/json"
				],
				"consumes": [
					"application/json"
				],
				"parameters": [
					{
						"name": "type",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The type of PQFORCE object"
					},
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "The ID of PQFORCE's object"
					},
					{
						"name": "Content-Type",
						"in": "header",
						"required": false,
						"enum": [
							"application/json"
						],
						"type": "string",
						"description": ""
					},
					{
						"name": "body",
						"in": "body",
						"required": true,
						"description": "",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/tdp.ThirdPartyReferenceAssignment"
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "This result indicates success",
						"headers": {}
					},
					"201": {
						"description": "This result indicates success and that a new object has been created",
						"headers": {}
					},
					"202": {
						"description": "This result indicates that the request was accepted but the operation may start later",
						"headers": {}
					},
					"400": {
						"description": "This indicates a bad request, meaning error on client side",
						"headers": {}
					},
					"401": {
						"description": "This indicates that the bearer token was not set correctly or that it is not valid",
						"headers": {}
					},
					"402": {
						"description": "This indicates that license requirements are not met",
						"headers": {}
					},
					"403": {
						"description": "This indicates that the user the bearer token belongs to is not allowed to perform the operation or retrieve the object",
						"headers": {}
					},
					"404": {
						"description": "This indicates that an object specified or requested was not found",
						"headers": {}
					},
					"503": {
						"description": "The server is in maintenance mode",
						"headers": {}
					},
					"default": {
						"description": "This indicates an unexpected error",
						"headers": {}
					}
				},
				"security": [
					{
						"bearer": []
					}
				]
			}
		}
	},
	"definitions": {
		"acm.ApiClientInfo": {
			"title": "acm.ApiClientInfo",
			"description": "Describes an API client",
			"type": "object",
			"properties": {
				"application": {
					"type": "string"
				},
				"appVersion": {
					"type": "string"
				},
				"appCompany": {
					"type": "string"
				}
			}
		},
		"acm.ApiTokenWithAuthUrl": {
			"title": "acm.ApiTokenWithAuthUrl",
			"description": "Contains the secret token and the URL to be called with the browser to authorize the API client for PQFORCE access",
			"type": "object",
			"properties": {
				"apiToken": {
					"type": "string"
				},
				"authorizationUrl": {
					"type": "string"
				}
			}
		},
		"acm.AuthenticationState": {
			"title": "acm.AuthenticationState",
			"description": "Contains information about the authentication state of the current session",
			"type": "object",
			"properties": {
				"tenant": {
					"type": "integer",
					"format": "int32"
				},
				"preAuthenticated": {
					"type": "integer",
					"format": "int32"
				},
				"fullyAuthenticated": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"acm.CubeMappingForType": {
			"title": "acm.CubeMappingForType",
			"description": "Contains the relations between actions, lifecycle transitions, states, relations and the resulting permissions for a given object type",
			"type": "object",
			"properties": {
				"relations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.RelationType"
					}
				},
				"states": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/lcy.LifecycleState"
					}
				},
				"actions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"byRelationState": {
					"type": "array",
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/acm.CubeMappingItem"
						}
					}
				}
			}
		},
		"acm.CubeMappingItem": {
			"title": "acm.CubeMappingItem",
			"description": "Contains the relations between actions, lifecycle transitions, relations and the resulting permissions for a given object type and a given lifecycle state",
			"type": "object",
			"properties": {
				"byAction": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"transitions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/acm.TransitionPermission"
					}
				}
			}
		},
		"acm.CubeViewForId": {
			"title": "acm.CubeViewForId",
			"description": "Contains the authorizations between a given object and the users who have access depending on different possible lifecycle states",
			"type": "object",
			"properties": {
				"users": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/acm.User"
					}
				},
				"states": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/lcy.LifecycleState"
					}
				},
				"actions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"byUserState": {
					"type": "array",
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/acm.CubeViewItem"
						}
					}
				}
			}
		},
		"acm.CubeViewForType": {
			"title": "acm.CubeViewForType",
			"description": "Contains the authorizations between a given object type and the user roles who have access depending on different possible lifecycle states and their relations to that object",
			"type": "object",
			"properties": {
				"userRoles": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/acm.UserRole"
					}
				},
				"relations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.RelationType"
					}
				},
				"states": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/lcy.LifecycleState"
					}
				},
				"actions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"byRoleRelationState": {
					"type": "array",
					"items": {
						"type": "array",
						"items": {
							"$ref": "#/definitions/acm.CubeViewItem"
						}
					}
				}
			}
		},
		"acm.CubeViewItem": {
			"title": "acm.CubeViewItem",
			"description": "Contains the relations between actions, lifecycle transitions, relations and the resulting authorizations for a given object or object type, a given lifecycle state and a given user or user role",
			"type": "object",
			"properties": {
				"byAction": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Grant"
					}
				},
				"transitions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/acm.TransitionGrant"
					}
				}
			}
		},
		"acm.FirstFactorAuthority": {
			"title": "acm.FirstFactorAuthority",
			"description": "An instance that identifies and authorizes users",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"loginRedirectUrl": {
					"type": "string"
				}
			}
		},
		"acm.LoginLog": {
			"title": "acm.LoginLog",
			"description": "Contains the description of a login attempt event",
			"type": "object",
			"properties": {
				"timestamp": {
					"type": "string",
					"format": "date-time"
				},
				"loginLogType": {
					"$ref": "#/definitions/acm.LoginLogType"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"acm.LoginLogType": {
			"title": "acm.LoginLogType",
			"description": "This enum helps for the differentiation of SAML 2.0 login logs",
			"example": "ACCESS_GRANTED",
			"type": "string",
			"enum": [
				"ACCESS_GRANTED",
				"ACCESS_DENIED",
				"ASSERTION_LOG"
			]
		},
		"acm.Permission": {
			"title": "acm.Permission",
			"description": "Describes a permission with its ID",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"acm.PermissionWithParents": {
			"title": "acm.PermissionWithParents",
			"description": "Describes a permission with its ID and parent permissions",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"parents": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"acm.Saml2IdentityProvider": {
			"title": "acm.Saml2IdentityProvider",
			"description": "Contains all necessary information for using an external identity provider (IDP) with SAML protocol",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"fingerprint": {
					"type": "string"
				},
				"signInUrl": {
					"type": "string"
				},
				"signOutUrl": {
					"type": "string"
				},
				"eMailField": {
					"type": "string"
				},
				"userIdField": {
					"type": "string"
				},
				"realNameField": {
					"type": "string"
				},
				"mobileNumberField": {
					"type": "string"
				},
				"groupsField": {
					"type": "string"
				},
				"userRoleMapping": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/acm.Saml2UserRoleMapping"
					}
				},
				"issuerUrl": {
					"type": "string"
				},
				"assertionConsumerServiceUrl": {
					"type": "string"
				},
				"directLoginUrl": {
					"type": "string"
				},
				"secondAuthorityDefault": {
					"type": "string"
				},
				"receiveNotificationsDefault": {
					"type": "integer",
					"format": "int32"
				},
				"logAssertions": {
					"type": "integer",
					"format": "int32"
				},
				"logs": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/acm.LoginLog"
					}
				}
			}
		},
		"acm.Saml2UserRoleMapping": {
			"title": "acm.Saml2UserRoleMapping",
			"description": "Describes a mapping between a PQFORCE user role and any required external group (i.e. AD group). If group is null, all users will be assigned to that user role",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"userRoleId": {
					"type": "string"
				},
				"mode": {
					"$ref": "#/definitions/acm.Saml2UserRoleMappingMode"
				},
				"group": {
					"type": "string"
				}
			}
		},
		"acm.Saml2UserRoleMappingMode": {
			"title": "acm.Saml2UserRoleMappingMode",
			"description": "Describes the way PQFORCE assigns a user role to a user with given IdP groups",
			"example": "NEVER",
			"type": "string",
			"enum": [
				"NEVER",
				"INDIVIDUAL",
				"MAP_GROUP",
				"ALWAYS"
			]
		},
		"acm.TransitionGrant": {
			"title": "acm.TransitionGrant",
			"description": "Describes whether a lifecycle transition is allowed to be performed by a given user",
			"type": "object",
			"properties": {
				"transition": {
					"$ref": "#/definitions/lcy.LifecycleTransition"
				},
				"grant": {
					"$ref": "#/definitions/pf.Grant"
				}
			}
		},
		"acm.TransitionPermission": {
			"title": "acm.TransitionPermission",
			"description": "Describes a permission that is required for performing a lifecycle transition",
			"type": "object",
			"properties": {
				"transition": {
					"$ref": "#/definitions/lcy.LifecycleTransition"
				},
				"permission": {
					"type": "string"
				}
			}
		},
		"acm.User": {
			"title": "acm.User",
			"description": "A PQFORCE user",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"firstAuthority": {
					"type": "string"
				},
				"secondAuthority": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"resource": {
					"$ref": "#/definitions/pf.Item"
				},
				"email": {
					"type": "string"
				},
				"mobile": {
					"type": "string"
				},
				"receiveNotifications": {
					"type": "integer",
					"format": "int32"
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"lastLogin": {
					"type": "string",
					"format": "date-time"
				},
				"passwordExpiry": {
					"type": "string",
					"format": "date-time"
				},
				"autoLogout": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"acm.UserAuthorization": {
			"title": "acm.UserAuthorization",
			"description": "Describes the different authorizations a given PQFORCE user has",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"grant": {
					"$ref": "#/definitions/pf.Grant"
				}
			}
		},
		"acm.UserCertificate": {
			"title": "acm.UserCertificate",
			"description": "Contains a user certificate whose raw part may be used to sign in to other systems",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"raw": {
					"type": "string"
				},
				"server": {
					"type": "string"
				},
				"tenant": {
					"type": "string"
				},
				"edition": {
					"type": "string"
				},
				"authority": {
					"type": "string"
				},
				"userId": {
					"type": "string"
				},
				"userName": {
					"type": "string"
				},
				"eMail": {
					"type": "string"
				},
				"logonUrl": {
					"type": "string"
				},
				"validity": {
					"type": "string",
					"format": "date-time"
				},
				"fingerprint": {
					"type": "string"
				}
			}
		},
		"acm.UserPreferences": {
			"title": "acm.UserPreferences",
			"description": "Stores user preferences in a structured way",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"language": {
					"type": "string"
				},
				"timezone": {
					"type": "string"
				},
				"currency": {
					"type": "string"
				}
			}
		},
		"acm.UserRole": {
			"title": "acm.UserRole",
			"description": "Describes a uer role",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"parentId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"acm.UserRoleAuthorization": {
			"title": "acm.UserRoleAuthorization",
			"description": "Describes the different authorizations (grants / denies) for a given user role",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"grant": {
					"$ref": "#/definitions/pf.Grant"
				}
			}
		},
		"acm.WelcomeMessage": {
			"title": "acm.WelcomeMessage",
			"description": "Contains a welcome message which may inform the user about special things",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"sticky": {
					"type": "integer",
					"format": "int32"
				},
				"subject": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"act.ActualsPeriod": {
			"title": "act.ActualsPeriod",
			"description": "Describes a period of actuals reporting which is the base unit to control whether reporting or modifying is possible or not.",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"beg": {
					"type": "string",
					"format": "date"
				},
				"end": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"act.PhaseEfforts": {
			"title": "act.PhaseEfforts",
			"description": "Describes the total efforts for a phase",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"planned": {
					"type": "string"
				},
				"actual": {
					"type": "string"
				},
				"remaining": {
					"type": "string"
				}
			}
		},
		"act.ProjectEfforts": {
			"title": "act.ProjectEfforts",
			"description": "Describes the total efforts for a project",
			"type": "object",
			"properties": {
				"planned": {
					"type": "string"
				},
				"actual": {
					"type": "string"
				},
				"remaining": {
					"type": "string"
				}
			}
		},
		"act.ProjectTime": {
			"title": "act.ProjectTime",
			"description": "Describes how many time a resource spent for a project (optional with a task) on a certain day",
			"type": "object",
			"properties": {
				"day": {
					"type": "string",
					"format": "date"
				},
				"projectId": {
					"type": "string"
				},
				"workItemId": {
					"type": "string"
				},
				"duration": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				}
			}
		},
		"act.ProjectWithPhasesEfforts": {
			"title": "act.ProjectWithPhasesEfforts",
			"description": "Describes the total efforts for a project, detailed down to phases",
			"type": "object",
			"properties": {
				"planned": {
					"type": "string"
				},
				"actual": {
					"type": "string"
				},
				"remaining": {
					"type": "string"
				},
				"phaseEfforts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/act.PhaseEfforts"
					}
				}
			}
		},
		"act.ResourceAbsence": {
			"title": "act.ResourceAbsence",
			"description": "Describes the absence of a resource",
			"type": "object",
			"properties": {
				"duration": {
					"type": "string"
				},
				"absenceType": {
					"type": "string"
				}
			}
		},
		"act.ResourceActualsPeriod": {
			"title": "act.ResourceActualsPeriod",
			"description": "Describes a period of actuals reporting of resource times which is the base unit to control whether reporting or modifying is possible or not.",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"beg": {
					"type": "string",
					"format": "date"
				},
				"end": {
					"type": "string",
					"format": "date"
				},
				"resourceId": {
					"type": "string"
				}
			}
		},
		"act.ResourceDaySummary": {
			"title": "act.ResourceDaySummary",
			"description": "Summarizes the target, presence and absence times of a resource on a given day",
			"type": "object",
			"properties": {
				"target": {
					"type": "string"
				},
				"sumAbsences": {
					"type": "string"
				},
				"sumPresences": {
					"type": "string"
				},
				"absences": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/act.ResourceAbsence"
					}
				}
			}
		},
		"act.ResourcePresence": {
			"title": "act.ResourcePresence",
			"description": "Describes the presence of a resource",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"start": {
					"type": "string",
					"format": "date-time"
				},
				"end": {
					"type": "string",
					"format": "date-time"
				},
				"startClocked": {
					"type": "string",
					"format": "date-time"
				},
				"endClocked": {
					"type": "string",
					"format": "date-time"
				},
				"overrideStart": {
					"type": "integer",
					"format": "int32"
				},
				"overrideEnd": {
					"type": "integer",
					"format": "int32"
				},
				"comment": {
					"type": "string"
				}
			}
		},
		"act.ResourceTimeCorrection": {
			"title": "act.ResourceTimeCorrection",
			"description": "Describes a time correction of a resource on a certain day",
			"type": "object",
			"properties": {
				"date": {
					"type": "string",
					"format": "date"
				},
				"duration": {
					"type": "string"
				},
				"comment": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"act.TimeBalance": {
			"title": "act.TimeBalance",
			"description": "Describes the time balance of resource up to and including a certain year",
			"type": "object",
			"properties": {
				"duration": {
					"type": "string"
				},
				"year": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"alc.AbsenceSlot": {
			"title": "alc.AbsenceSlot",
			"description": "Defines an absence slot by type, name, color and remark.",
			"type": "object",
			"properties": {
				"absenceType": {
					"type": "string"
				},
				"absenceName": {
					"type": "string"
				},
				"absenceColor": {
					"type": "string"
				},
				"remark": {
					"type": "string"
				}
			}
		},
		"alc.AllocationHistory": {
			"title": "alc.AllocationHistory",
			"description": "Contains information about changes that lead to changes in work load of a resource",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"activeScenarioTimeline": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.ItemTimelineWithReference"
					}
				},
				"absencesTimeline": {
					"$ref": "#/definitions/alc.MicroAllocationTimeline"
				},
				"reservationsTimeline": {
					"$ref": "#/definitions/alc.MicroAllocationTimeline"
				},
				"workItemTimeline": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.WorkItemTimeline"
					}
				},
				"allocationTimeline": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.MacroAllocationTimeline"
					}
				}
			}
		},
		"alc.MacroAllocationSlot": {
			"title": "alc.MacroAllocationSlot",
			"description": "Contains macro allocations and availability information for a resource during a time span",
			"type": "object",
			"properties": {
				"availability": {
					"type": "string"
				},
				"presence": {
					"type": "string"
				},
				"expectedPresence": {
					"type": "string"
				},
				"capacity": {
					"type": "string"
				},
				"fte": {
					"type": "string"
				},
				"ftePercent": {
					"type": "integer",
					"format": "int32"
				},
				"deviationFromOptimum": {
					"type": "number",
					"format": "double"
				},
				"forecasts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.TimeForecast"
					}
				}
			}
		},
		"alc.MacroAllocationStructure": {
			"title": "alc.MacroAllocationStructure",
			"description": "JSON serializable class for information about a resource and the projects allocated to it.",
			"type": "object",
			"properties": {
				"projects": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.ProjectWithPhases"
					}
				}
			}
		},
		"alc.MacroAllocationTimeline": {
			"title": "alc.MacroAllocationTimeline",
			"description": "The timeline of changes on a micro planning of a resource",
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.MacroAllocationTimelineEntry"
					}
				},
				"ref": {
					"$ref": "#/definitions/pf.Reference"
				}
			}
		},
		"alc.MacroAllocationTimelineEntry": {
			"title": "alc.MacroAllocationTimelineEntry",
			"description": "A timeline entry containing a macro allocation with the previous one",
			"type": "object",
			"properties": {
				"current": {
					"$ref": "#/definitions/alc.ResourceAllocation"
				},
				"previous": {
					"$ref": "#/definitions/alc.ResourceAllocation"
				},
				"workItem": {
					"$ref": "#/definitions/pf.Item"
				},
				"workItemStart": {
					"type": "string",
					"format": "date-time"
				},
				"workItemEnd": {
					"type": "string",
					"format": "date-time"
				},
				"pointInTime": {
					"type": "string",
					"format": "date-time"
				},
				"user": {
					"$ref": "#/definitions/pf.Item"
				}
			}
		},
		"alc.MicroAllocationSlot": {
			"title": "alc.MicroAllocationSlot",
			"type": "object",
			"properties": {
				"projectId": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"scenarioId": {
					"type": "string"
				},
				"scenarioName": {
					"type": "string"
				},
				"phaseId": {
					"type": "string"
				},
				"phaseName": {
					"type": "string"
				}
			}
		},
		"alc.MicroAllocationSlotCount": {
			"title": "alc.MicroAllocationSlotCount",
			"description": "JSON serializable class for allocations of resources to phases in micro planning.",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"hint": {
					"type": "string"
				},
				"slotcount": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"alc.MicroAllocationStatistics": {
			"title": "alc.MicroAllocationStatistics",
			"description": "JSON serializable class for allocations of resources to phases in micro planning.",
			"type": "object",
			"properties": {
				"absences": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.MicroAllocationSlotCount"
					}
				},
				"projects": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.MicroAllocationSlotCount"
					}
				},
				"available": {
					"$ref": "#/definitions/alc.MicroAllocationSlotCount"
				},
				"unavailable": {
					"$ref": "#/definitions/alc.MicroAllocationSlotCount"
				}
			}
		},
		"alc.MicroAllocationTimeline": {
			"title": "alc.MicroAllocationTimeline",
			"description": "The timeline of changes on a micro planning of a resource",
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.MicroAllocationTimelineEntry"
					}
				}
			}
		},
		"alc.MicroAllocationTimelineEntry": {
			"title": "alc.MicroAllocationTimelineEntry",
			"description": "A timeline entry containing an item",
			"type": "object",
			"properties": {
				"obj": {
					"$ref": "#/definitions/pf.Item"
				},
				"pointInTime": {
					"type": "string",
					"format": "date-time"
				},
				"user": {
					"$ref": "#/definitions/pf.Item"
				},
				"date": {
					"type": "string",
					"format": "date"
				},
				"shift": {
					"type": "string"
				}
			}
		},
		"alc.ModelSlot": {
			"title": "alc.ModelSlot",
			"description": "Defines a worktime model slot.",
			"type": "object",
			"properties": {
				"presence": {
					"type": "integer",
					"format": "int32"
				},
				"duration": {
					"type": "string"
				},
				"holiday": {
					"type": "string"
				}
			}
		},
		"alc.Planning": {
			"title": "alc.Planning",
			"description": "Planning for a date and shifts.",
			"type": "object",
			"properties": {
				"begin": {
					"type": "string",
					"format": "date"
				},
				"shifts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.ShiftPlanning"
					}
				}
			}
		},
		"alc.PlanningSlot": {
			"title": "alc.PlanningSlot",
			"description": "JSON serializable class for allocations of resources to phases in micro planning.",
			"type": "object",
			"properties": {
				"absence": {
					"$ref": "#/definitions/alc.AbsenceSlot"
				},
				"allocation": {
					"$ref": "#/definitions/alc.MicroAllocationSlot"
				},
				"presence": {
					"type": "integer",
					"format": "int32"
				},
				"model": {
					"$ref": "#/definitions/alc.ModelSlot"
				},
				"presenceDesc": {
					"type": "string"
				}
			}
		},
		"alc.ProjectAllocation": {
			"title": "alc.ProjectAllocation",
			"description": "Contains information about a project allocation of a resource",
			"type": "object",
			"properties": {
				"project": {
					"$ref": "#/definitions/pf.ItemWithDeletedFlag"
				},
				"projectStatus": {
					"$ref": "#/definitions/pf.Item"
				},
				"isActive": {
					"type": "integer",
					"format": "int32"
				},
				"planned": {
					"type": "string"
				},
				"actual": {
					"type": "string"
				},
				"remaining": {
					"type": "string"
				}
			}
		},
		"alc.ProjectAllocations": {
			"title": "alc.ProjectAllocations",
			"description": "Information about all project allocations of a resource",
			"type": "object",
			"properties": {
				"availability": {
					"type": "string"
				},
				"projects": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.ProjectAllocation"
					}
				}
			}
		},
		"alc.ProjectWithPhases": {
			"title": "alc.ProjectWithPhases",
			"description": "JSON serializable class for information about a resource and the projects allocated to it.",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"phases": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.GanttItem"
					}
				}
			}
		},
		"alc.ProjectWorkItemAllocation": {
			"title": "alc.ProjectWorkItemAllocation",
			"description": "Information about effort (planned vs. actual) on a project work item",
			"type": "object",
			"properties": {
				"workItem": {
					"$ref": "#/definitions/pf.Item"
				},
				"planned": {
					"type": "string"
				},
				"actual": {
					"type": "string"
				},
				"remaining": {
					"type": "string"
				}
			}
		},
		"alc.ProjectWorkItemAllocations": {
			"title": "alc.ProjectWorkItemAllocations",
			"description": "Information about effort of a resource on different project work items",
			"type": "object",
			"properties": {
				"resource": {
					"$ref": "#/definitions/pf.ItemWithDeletedFlag"
				},
				"availability": {
					"type": "string"
				},
				"workItems": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.ProjectWorkItemAllocation"
					}
				}
			}
		},
		"alc.ResourceAllocation": {
			"title": "alc.ResourceAllocation",
			"description": "Describes a resource allocation",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"workItemId": {
					"type": "string"
				},
				"resourceId": {
					"type": "string"
				},
				"amount": {
					"type": "number",
					"format": "double"
				},
				"amountUnit": {
					"type": "string"
				},
				"amountType": {
					"$ref": "#/definitions/alc.ResourceAllocationAmountType"
				}
			}
		},
		"alc.ResourceAllocationAmountType": {
			"title": "alc.ResourceAllocationAmountType",
			"description": "The type amount (how it is measured) of a resource allocation",
			"example": "ABSOLUTE",
			"type": "string",
			"enum": [
				"ABSOLUTE",
				"OF_CAPACITY",
				"OF_AVAILABILITY",
				"OF_FTE",
				"OF_PHASE"
			]
		},
		"alc.ShiftPlanning": {
			"title": "alc.ShiftPlanning",
			"description": "Defines planning slots for a resource shift.",
			"type": "object",
			"properties": {
				"shift": {
					"$ref": "#/definitions/res.ResourceShift"
				},
				"slots": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.PlanningSlot"
					}
				}
			}
		},
		"alc.TimeForecast": {
			"title": "alc.TimeForecast",
			"description": "The forecast of an allocation comparing planning, done and still to be done",
			"type": "object",
			"properties": {
				"planned": {
					"type": "string"
				},
				"actual": {
					"type": "string"
				},
				"expectedActual": {
					"type": "string"
				},
				"remaining": {
					"type": "string"
				}
			}
		},
		"alc.WorkItemTimeline": {
			"title": "alc.WorkItemTimeline",
			"description": "The timeline of changes on a micro planning of a resource",
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.WorkItemTimelineEntry"
					}
				},
				"ref": {
					"$ref": "#/definitions/pf.Reference"
				}
			}
		},
		"alc.WorkItemTimelineEntry": {
			"title": "alc.WorkItemTimelineEntry",
			"description": "A timeline entry containing a macro allocation with the previous one",
			"type": "object",
			"properties": {
				"current": {
					"$ref": "#/definitions/pm.WorkItem"
				},
				"previous": {
					"$ref": "#/definitions/pm.WorkItem"
				},
				"pointInTime": {
					"type": "string",
					"format": "date-time"
				},
				"user": {
					"$ref": "#/definitions/pf.Item"
				}
			}
		},
		"alc.Workload": {
			"title": "alc.Workload",
			"description": "A workload histogram over a certain time",
			"type": "object",
			"properties": {
				"maxFtePercent": {
					"type": "integer",
					"format": "int32"
				},
				"maxCapacity": {
					"type": "string"
				},
				"grouping": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"slots": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/alc.MacroAllocationSlot"
					}
				},
				"actualsReportedUntil": {
					"type": "string",
					"format": "date"
				},
				"presenceReportedUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"cht.Baseline": {
			"title": "cht.Baseline",
			"description": "A chart baseline (x axis definition and values)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"values": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"refs": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Reference"
					}
				},
				"scale": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cht.ScalePoint"
					}
				}
			}
		},
		"cht.BaselineModel": {
			"title": "cht.BaselineModel",
			"description": "Defines the meta model of a baseline and its compatibility to different datasets",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"baselineType": {
					"type": "string"
				},
				"filterType": {
					"type": "string"
				},
				"datasetGroups": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cht.DatasetModelGroup"
					}
				}
			}
		},
		"cht.Chart": {
			"title": "cht.Chart",
			"description": "A chart's values",
			"type": "object",
			"properties": {
				"baseline": {
					"$ref": "#/definitions/cht.Baseline"
				},
				"datasets": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cht.Dataset"
					}
				}
			}
		},
		"cht.ChartModel": {
			"title": "cht.ChartModel",
			"description": "The metamodel that describes all possible chart contents and their compatibility for a given kind of chart",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"baselines": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cht.BaselineModel"
					}
				}
			}
		},
		"cht.Dataset": {
			"title": "cht.Dataset",
			"description": "A chart baseline (x axis definition and values)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"values": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"scale": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cht.ScalePoint"
					}
				}
			}
		},
		"cht.DatasetModel": {
			"title": "cht.DatasetModel",
			"description": "Defines the meta model of a dataset",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"datasetType": {
					"type": "string"
				},
				"filterType": {
					"type": "string"
				}
			}
		},
		"cht.DatasetModelGroup": {
			"title": "cht.DatasetModelGroup",
			"description": "A group of dataset models to make it easier to navigate through the dataset models",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"datasets": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cht.DatasetModel"
					}
				}
			}
		},
		"cht.ScalePoint": {
			"title": "cht.ScalePoint",
			"description": "Defines a point of the the scale of a value on an axis",
			"type": "object",
			"properties": {
				"value": {
					"type": "string"
				},
				"label": {
					"$ref": "#/definitions/pf.Item"
				}
			}
		},
		"clf.UuidArray": {
			"title": "clf.UuidArray",
			"description": "Array of Universally Unique Identifiers (UUIDs)",
			"type": "object",
			"properties": {
				"newUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"cls.Classification": {
			"title": "cls.Classification",
			"description": "Contains a classification of a specific object including the ratings",
			"type": "object",
			"properties": {
				"classificationSchemaId": {
					"type": "string"
				},
				"data": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cls.ClassificationData"
					}
				},
				"classificationId": {
					"type": "string"
				},
				"score": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"cls.ClassificationAttribute": {
			"title": "cls.ClassificationAttribute",
			"description": "Describes an attribute which will be rated. Multiple attrribute ratings result in an overall rating which will be represented by the classification",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"weight": {
					"type": "number",
					"format": "double"
				},
				"values": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cls.ClassificationAttributeValue"
					}
				}
			}
		},
		"cls.ClassificationAttributeValue": {
			"title": "cls.ClassificationAttributeValue",
			"description": "A value that might be selected to rate a classification attribute",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"points": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"cls.ClassificationClass": {
			"title": "cls.ClassificationClass",
			"description": "A resulting classification that is determined by categorizing the weighted average of all attribute's ratings",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"minPoints": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"cls.ClassificationData": {
			"title": "cls.ClassificationData",
			"description": "Contains a rating of any attribute estimated by the user",
			"type": "object",
			"properties": {
				"attributeId": {
					"type": "string"
				},
				"valueId": {
					"type": "string"
				},
				"description": {
					"type": "string"
				}
			}
		},
		"cls.ClassificationPresentation": {
			"title": "cls.ClassificationPresentation",
			"description": "Defines the different attributes that may be used by any visualizing system to show classifications",
			"example": "HideWeights",
			"type": "string",
			"enum": [
				"HideWeights",
				"HideValues",
				"WeightedSpider"
			]
		},
		"cls.ClassificationSchema": {
			"title": "cls.ClassificationSchema",
			"description": "Describes how a classification is determined",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"classes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cls.ClassificationClass"
					}
				},
				"attributes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cls.ClassificationAttribute"
					}
				},
				"presentation": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cls.ClassificationPresentation"
					}
				}
			}
		},
		"doc.AvailableExport": {
			"title": "doc.AvailableExport",
			"description": "Describe the available export",
			"type": "object",
			"properties": {
				"exportType": {
					"type": "string"
				},
				"exportFileType": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"doc.ExportConfigurationRequest": {
			"title": "doc.ExportConfigurationRequest",
			"description": "Describe the export template",
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"view": {
					"type": "string"
				},
				"options": {
					"type": "string"
				},
				"exportTemplates": {
					"type": "string"
				}
			}
		},
		"doc.ExportRequest": {
			"title": "doc.ExportRequest",
			"description": "Describe the export template",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"format": {
					"type": "string"
				},
				"templateId": {
					"type": "string"
				},
				"view": {
					"$ref": "#/definitions/doc.ExportRequestView"
				}
			}
		},
		"doc.ExportRequestView": {
			"title": "doc.ExportRequestView",
			"description": "Describe the view of the export",
			"type": "object",
			"properties": {
				"exportViewType": {
					"type": "string"
				},
				"options": {
					"type": "string"
				},
				"configurationViewId": {
					"type": "string"
				},
				"appendixTemplateId": {
					"type": "string"
				}
			}
		},
		"doc.ExportTemplate": {
			"title": "doc.ExportTemplate",
			"description": "Describe the export template",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"view": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"fileType": {
					"type": "string"
				},
				"template": {
					"type": "string"
				}
			}
		},
		"doc.ExportViewConfiguration": {
			"title": "doc.ExportViewConfiguration",
			"description": "Defines the export configuration for the specific view",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"options": {
					"type": "string"
				},
				"exportTemplates": {
					"type": "string"
				}
			}
		},
		"dpo.DispoAuthorization": {
			"title": "dpo.DispoAuthorization",
			"type": "object",
			"properties": {
				"view": {
					"type": "integer",
					"format": "int32"
				},
				"change": {
					"type": "integer",
					"format": "int32"
				},
				"delete": {
					"type": "integer",
					"format": "int32"
				},
				"changeMacroPlanning": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"dpo.DispoPhase": {
			"title": "dpo.DispoPhase",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"ganttId": {
					"type": "string"
				},
				"beg": {
					"type": "string",
					"format": "date-time"
				},
				"end": {
					"type": "string",
					"format": "date-time"
				},
				"fixed": {
					"type": "integer",
					"format": "int32"
				},
				"progress": {
					"type": "number",
					"format": "double"
				},
				"autoProgress": {
					"type": "integer",
					"format": "int32"
				},
				"budget": {
					"type": "string"
				},
				"planned": {
					"type": "string"
				},
				"assigned": {
					"type": "string"
				},
				"assignedRemaining": {
					"type": "string"
				},
				"shared": {
					"type": "integer",
					"format": "int32"
				},
				"parentPhaseId": {
					"type": "string"
				},
				"authorizations": {
					"$ref": "#/definitions/dpo.DispoAuthorization"
				}
			}
		},
		"dpo.ProjectWithPhases": {
			"title": "dpo.ProjectWithPhases",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"ganttId": {
					"type": "string"
				},
				"beg": {
					"type": "string",
					"format": "date-time"
				},
				"end": {
					"type": "string",
					"format": "date-time"
				},
				"fixed": {
					"type": "integer",
					"format": "int32"
				},
				"stateId": {
					"type": "string"
				},
				"phases": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/dpo.DispoPhase"
					}
				}
			}
		},
		"dpo.ResourceAllocationWithPhasesAndAbsences": {
			"title": "dpo.ResourceAllocationWithPhasesAndAbsences",
			"description": "JSON serializable class for information about a resource and the projects allocated to it.",
			"type": "object",
			"properties": {
				"projects": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/dpo.ProjectWithPhases"
					}
				},
				"absences": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.GanttItem"
					}
				}
			}
		},
		"fco.BudgetCalculated": {
			"title": "fco.BudgetCalculated",
			"description": "A calculated budget like a sum",
			"type": "object",
			"properties": {
				"budgetAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"assignedAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"bufferAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.BudgetPosition": {
			"title": "fco.BudgetPosition",
			"description": "A calculated budget like a sum",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"budgetAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"assignedAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"bufferAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"costsType": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"source": {
					"$ref": "#/definitions/fco.BudgetSource"
				}
			}
		},
		"fco.BudgetSource": {
			"title": "fco.BudgetSource",
			"description": "Describes a source for budgets (root budget position and assigning project portfolio)",
			"type": "object",
			"properties": {
				"projectPortfolioId": {
					"type": "string"
				},
				"originId": {
					"type": "string"
				}
			}
		},
		"fco.ConvertedCurrencyAmount": {
			"title": "fco.ConvertedCurrencyAmount",
			"description": "An amount of money that might have been converted into another currency",
			"type": "object",
			"properties": {
				"original": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"converted": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.CostsActual": {
			"title": "fco.CostsActual",
			"description": "A disbursement that was made",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"timeOfPayment": {
					"type": "string",
					"format": "date"
				},
				"plannedAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				}
			}
		},
		"fco.CostsActualGroup": {
			"title": "fco.CostsActualGroup",
			"description": "Costs actuals grouped by costs position",
			"type": "object",
			"properties": {
				"group": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"actuals": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsActual"
					}
				}
			}
		},
		"fco.CostsDimension": {
			"title": "fco.CostsDimension",
			"description": "Different dimensions of costs into which costs might be grouped",
			"example": "FLOW",
			"type": "string",
			"enum": [
				"FLOW",
				"TYPE",
				"TYPEGROUP",
				"CONTAINER",
				"PROJECT",
				"POSITION",
				"MGMTPHASE"
			]
		},
		"fco.CostsForecast": {
			"title": "fco.CostsForecast",
			"description": "A costs forecast for a given type of costs",
			"type": "object",
			"properties": {
				"planned": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"actual": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"remaining": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"type": {
					"$ref": "#/definitions/pf.NamedReference"
				}
			}
		},
		"fco.CostsForecastCalculated": {
			"title": "fco.CostsForecastCalculated",
			"description": "A calculated costs forecast like a sum",
			"type": "object",
			"properties": {
				"planned": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"actual": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"remaining": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.CostsForecastGroup": {
			"title": "fco.CostsForecastGroup",
			"description": "A costs forecast for a given type of costs",
			"type": "object",
			"properties": {
				"forecasts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsForecast"
					}
				},
				"forecastTotal": {
					"$ref": "#/definitions/fco.CostsForecastCalculated"
				},
				"forecast": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"typeGroup": {
					"$ref": "#/definitions/pf.NamedReference"
				}
			}
		},
		"fco.CostsForecasts": {
			"title": "fco.CostsForecasts",
			"description": "Summed costs forecasts",
			"type": "object",
			"properties": {
				"forecasts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsForecast"
					}
				},
				"forecastTotal": {
					"$ref": "#/definitions/fco.CostsForecastCalculated"
				},
				"forecast": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.CostsForecastsGroups": {
			"title": "fco.CostsForecastsGroups",
			"description": "Summed costs forecasts by costs type group",
			"type": "object",
			"properties": {
				"forecasts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsForecastGroup"
					}
				},
				"forecastTotal": {
					"$ref": "#/definitions/fco.CostsForecastCalculated"
				},
				"forecast": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.CostsMatrix": {
			"title": "fco.CostsMatrix",
			"description": "A costs matrix with cascaded grouping of costs timelines with hierarchic calendar",
			"type": "object",
			"properties": {
				"layers": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsMatrixLayer"
					}
				},
				"groups": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsMatrixGroup"
					}
				},
				"total": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"calendar": {
					"$ref": "#/definitions/pf.Calendar"
				},
				"hierarchy": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsMatrixHierarchy"
					}
				}
			}
		},
		"fco.CostsMatrixGroup": {
			"title": "fco.CostsMatrixGroup",
			"description": "A group within the costs matrix with timeline according to calendar definition in the matrix and total",
			"type": "object",
			"properties": {
				"layers": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsMatrixLayer"
					}
				},
				"groups": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsMatrixGroup"
					}
				},
				"total": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.CostsMatrixHierarchy": {
			"title": "fco.CostsMatrixHierarchy",
			"description": "A hierarchical element within the matrix",
			"type": "object",
			"properties": {
				"dimension": {
					"$ref": "#/definitions/fco.CostsDimension"
				},
				"label": {
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Item"
					}
				}
			}
		},
		"fco.CostsMatrixLayer": {
			"title": "fco.CostsMatrixLayer",
			"description": "A costs timeline corresponding to a calendar layer with explicit values for the range that is split in two parts by today",
			"type": "object",
			"properties": {
				"rangeToToday": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"rangeFromToday": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"ranges": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CurrencyAmount"
					}
				}
			}
		},
		"fco.CostsOverview": {
			"title": "fco.CostsOverview",
			"description": "A costs overview providing the status of budget vs. forecast at a glance",
			"type": "object",
			"properties": {
				"budgets": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.BudgetPosition"
					}
				},
				"budgetsInForeignObjs": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"budgetsInSubObjs": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"managedBudgetTotal": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"budgetsInExternalObjsTotal": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"managedBudgetWithSubObjsTotal": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"budgetTotalOverall": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"budgetTotalInRange": {
					"$ref": "#/definitions/fco.BudgetCalculated"
				},
				"forecasts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CostsForecastGroup"
					}
				},
				"forecastTotal": {
					"$ref": "#/definitions/fco.CostsForecastCalculated"
				},
				"forecast": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"plannedDiffBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"plannedDiffAssignedBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"actualDiffPlanned": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"forecastDiffPlanned": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"forecastDiffBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"forecastDiffAssignedBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.CostsPosition": {
			"title": "fco.CostsPosition",
			"description": "A costs position of a project or similar object",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"costsType": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"costsCenter": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"payPlan": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"plannedAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"supplementaryAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"remainingAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"actualAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"availableAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"forecastScheme": {
					"$ref": "#/definitions/fco.ForecastSchema"
				}
			}
		},
		"fco.CostsType": {
			"title": "fco.CostsType",
			"description": "Type of costs (personnel costs, material costs, ...)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"group": {
					"$ref": "#/definitions/fco.CostsTypeGroup"
				},
				"payPlan": {
					"type": "string"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"fco.CostsTypeGroup": {
			"title": "fco.CostsTypeGroup",
			"description": "Group for types of costs (personnel costs, material costs, ...)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"fco.Currency": {
			"title": "fco.Currency",
			"description": "Information about a currency",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"fco.CurrencyAmount": {
			"title": "fco.CurrencyAmount",
			"description": "An amount of money",
			"type": "object",
			"properties": {
				"amount": {
					"type": "number",
					"format": "double"
				},
				"currency": {
					"type": "string"
				}
			}
		},
		"fco.CurrencyExchangeRate": {
			"title": "fco.CurrencyExchangeRate",
			"description": "Defines the exchange rate between a currency and a (virtual) currency starting from a given date",
			"type": "object",
			"properties": {
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"rate": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"fco.CurrencyExchangeRates": {
			"title": "fco.CurrencyExchangeRates",
			"description": "Defines the exchange rate between a currency and a (virtual) currency over time",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"rates": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/fco.CurrencyExchangeRate"
					}
				}
			}
		},
		"fco.ExternalBudget": {
			"title": "fco.ExternalBudget",
			"description": "Contains an external budget source",
			"type": "object",
			"properties": {
				"budget": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"portfolio": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"amount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				}
			}
		},
		"fco.ForecastSchema": {
			"title": "fco.ForecastSchema",
			"description": "Defines whether remaining or supplementary was provided",
			"example": "ActualPlusRemaining",
			"type": "string",
			"enum": [
				"ActualPlusRemaining",
				"PlannedPlusSupplementary"
			]
		},
		"fco.ProjectCostsPosition": {
			"title": "fco.ProjectCostsPosition",
			"description": "A costs position of a project",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"costsType": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"costsCenter": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"payPlan": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"plannedAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"supplementaryAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"remainingAmount": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"actualAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"availableAmount": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"forecastScheme": {
					"$ref": "#/definitions/fco.ForecastSchema"
				},
				"assignedWorkItems": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Item"
					}
				}
			}
		},
		"lcy.ItemWithLifecycle": {
			"title": "lcy.ItemWithLifecycle",
			"description": "A generic item with basic identifying information, validity and current lifecycle state",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"lifecyclestate": {
					"$ref": "#/definitions/lcy.LifecycleState"
				}
			}
		},
		"lcy.LifecycleCategory": {
			"title": "lcy.LifecycleCategory",
			"description": "A category for a lifecycle state adding some semantics",
			"example": "NEW",
			"type": "string",
			"enum": [
				"NEW",
				"PLANNING",
				"ACTIVE",
				"CLOSED"
			]
		},
		"lcy.LifecycleHistory": {
			"title": "lcy.LifecycleHistory",
			"description": "Contains the history of staes and transitions of a specific object",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"state": {
					"$ref": "#/definitions/lcy.LifecycleState"
				},
				"transition": {
					"$ref": "#/definitions/lcy.LifecycleTransition"
				},
				"timestamp": {
					"type": "string",
					"format": "date-time"
				},
				"initiatedBy": {
					"$ref": "#/definitions/pf.ItemWithDeletedFlag"
				},
				"remark": {
					"type": "string"
				}
			}
		},
		"lcy.LifecycleState": {
			"title": "lcy.LifecycleState",
			"description": "Describes a state in an object's lifecycle",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"category": {
					"$ref": "#/definitions/lcy.LifecycleCategory"
				},
				"isDecision": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"lcy.LifecycleTransition": {
			"title": "lcy.LifecycleTransition",
			"description": "Describes a transition in an object's lifecycle",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"from": {
					"$ref": "#/definitions/lcy.LifecycleState"
				},
				"to": {
					"$ref": "#/definitions/lcy.LifecycleState"
				}
			}
		},
		"lic.LicenseQuota": {
			"title": "lic.LicenseQuota",
			"description": "Describes the usage of a licensed quota",
			"type": "object",
			"properties": {
				"type": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"usage": {
					"type": "integer",
					"format": "int32"
				},
				"limit": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"lic.LicenseStatus": {
			"title": "lic.LicenseStatus",
			"description": "Contains information about the current license",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"company": {
					"type": "string"
				},
				"admin": {
					"type": "string"
				},
				"edition": {
					"type": "string"
				},
				"validUntil": {
					"type": "string",
					"format": "date-time"
				},
				"usage": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/lic.LicenseQuota"
					}
				}
			}
		},
		"main.Versions": {
			"title": "main.Versions",
			"description": "Version information about this PQFORCE instance",
			"type": "object",
			"properties": {
				"productName": {
					"type": "string"
				},
				"productVersion": {
					"type": "string"
				},
				"apiGeneration": {
					"type": "string"
				},
				"apiVersion": {
					"type": "string"
				},
				"apiFingerprint": {
					"type": "string"
				}
			}
		},
		"msg.Message": {
			"title": "msg.Message",
			"description": "Describes a message in the PQFORCE messaging system",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"subject": {
					"type": "string"
				},
				"body": {
					"type": "string"
				},
				"source": {
					"$ref": "#/definitions/pf.Reference"
				},
				"addresseesShown": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Item"
					}
				},
				"trigger": {
					"type": "string"
				},
				"urgency": {
					"$ref": "#/definitions/msg.MessageUrgency"
				},
				"privacy": {
					"$ref": "#/definitions/msg.MessagePrivacy"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"readAt": {
					"type": "string",
					"format": "date-time"
				},
				"forwardedAt": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"msg.MessageContent": {
			"title": "msg.MessageContent",
			"description": "Describes the message content that should be sent",
			"type": "object",
			"properties": {
				"subject": {
					"type": "string"
				},
				"body": {
					"type": "string"
				},
				"addressees": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"urgency": {
					"$ref": "#/definitions/msg.MessageUrgency"
				},
				"privacy": {
					"$ref": "#/definitions/msg.MessagePrivacy"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"msg.MessagePrivacy": {
			"title": "msg.MessagePrivacy",
			"description": "Describes a privacy level",
			"example": "PUBLIC",
			"type": "string",
			"enum": [
				"PUBLIC",
				"NORMAL",
				"PRIVATE"
			]
		},
		"msg.MessageUrgency": {
			"title": "msg.MessageUrgency",
			"description": "Describes a level how urgent a message is",
			"example": "NORMAL",
			"type": "string",
			"enum": [
				"NORMAL",
				"URGENT",
				"BREAKING_NEWS"
			]
		},
		"mtg.Meeting": {
			"title": "mtg.Meeting",
			"description": "Describe a meeting",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"groupId": {
					"type": "string"
				},
				"location": {
					"type": "string"
				},
				"timeStart": {
					"type": "string",
					"format": "date-time"
				},
				"timeEnd": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"mtg.MeetingGroup": {
			"title": "mtg.MeetingGroup",
			"description": "Describe a meeting group",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"parentGroupId": {
					"type": "string"
				}
			}
		},
		"nav.AddUrlArg": {
			"title": "nav.AddUrlArg",
			"description": "Meta information about POST URLs in navigation for adding or linking",
			"type": "object",
			"properties": {
				"url": {
					"type": "string"
				},
				"behaviour": {
					"$ref": "#/definitions/nav.AddUrlArgBehaviour"
				},
				"argumentTypes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"argumentUrl": {
					"type": "string"
				},
				"dropPriority": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"nav.AddUrlArgBehaviour": {
			"title": "nav.AddUrlArgBehaviour",
			"description": "Defines the behaviour that occurs when add URL is called (client may show appropriate mouse pointers or message boxes)",
			"example": "COPY",
			"type": "string",
			"enum": [
				"COPY",
				"MOVE",
				"LINK"
			]
		},
		"nav.DeleteUrl": {
			"title": "nav.DeleteUrl",
			"description": "Meta information about DELETE URLs in navigation",
			"type": "object",
			"properties": {
				"url": {
					"type": "string"
				},
				"behaviour": {
					"$ref": "#/definitions/nav.DeleteUrlBehaviour"
				}
			}
		},
		"nav.DeleteUrlBehaviour": {
			"title": "nav.DeleteUrlBehaviour",
			"description": "Defines the behaviour that occurs when delete URL is called (client may show appropriate mouse pointers or message boxes)",
			"example": "DELETE",
			"type": "string",
			"enum": [
				"DELETE",
				"DELETECASCADE",
				"UNLINK"
			]
		},
		"nav.Feature": {
			"title": "nav.Feature",
			"description": "A feature (tab) above the detail screen in the client",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"nav.FindLinkQuery": {
			"title": "nav.FindLinkQuery",
			"description": "Describes a relation to another object to be found",
			"type": "object",
			"properties": {
				"objectType": {
					"type": "string"
				},
				"fulltext": {
					"type": "string"
				},
				"regex": {
					"type": "string"
				},
				"ranking": {
					"type": "integer",
					"format": "int32"
				},
				"memberRegex": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindMemberRegexQuery"
					}
				},
				"memberText": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindMemberTextQuery"
					}
				},
				"link": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindLinkQuery"
					}
				},
				"linkType": {
					"type": "string"
				},
				"forward": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"nav.FindMemberRegexQuery": {
			"title": "nav.FindMemberRegexQuery",
			"description": "Describes a RegEx that may match a single member of an object",
			"type": "object",
			"properties": {
				"member": {
					"type": "string"
				},
				"regex": {
					"type": "string"
				}
			}
		},
		"nav.FindMemberTextQuery": {
			"title": "nav.FindMemberTextQuery",
			"description": "Describes a text that may be found within a single member of an object",
			"type": "object",
			"properties": {
				"member": {
					"type": "string"
				},
				"text": {
					"type": "string"
				}
			}
		},
		"nav.FindQuery": {
			"title": "nav.FindQuery",
			"description": "A generic query that matches an object with relations",
			"type": "object",
			"properties": {
				"objectType": {
					"type": "string"
				},
				"fulltext": {
					"type": "string"
				},
				"regex": {
					"type": "string"
				},
				"ranking": {
					"type": "integer",
					"format": "int32"
				},
				"memberRegex": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindMemberRegexQuery"
					}
				},
				"memberText": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindMemberTextQuery"
					}
				},
				"link": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindLinkQuery"
					}
				}
			}
		},
		"nav.FindRequest": {
			"title": "nav.FindRequest",
			"description": "A generic request to initiate an advanced search",
			"type": "object",
			"properties": {
				"objectType": {
					"type": "string"
				},
				"fulltext": {
					"type": "string"
				},
				"regex": {
					"type": "string"
				},
				"ranking": {
					"type": "integer",
					"format": "int32"
				},
				"memberRegex": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindMemberRegexQuery"
					}
				},
				"memberText": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindMemberTextQuery"
					}
				},
				"link": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.FindLinkQuery"
					}
				},
				"root": {
					"$ref": "#/definitions/pf.Reference"
				}
			}
		},
		"nav.LinkTypeInfo": {
			"title": "nav.LinkTypeInfo",
			"description": "a type of linked navigation items",
			"type": "object",
			"properties": {
				"linktype": {
					"type": "string"
				},
				"forward": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"imageUrl": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"deleteUrls": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.DeleteUrl"
					}
				},
				"addUrl": {
					"type": "string"
				},
				"addUrlsArg": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.AddUrlArg"
					}
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"inheritWorkload": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"nav.MemberInfo": {
			"title": "nav.MemberInfo",
			"description": "Information about a member / property of an object",
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"label": {
					"type": "string"
				}
			}
		},
		"nav.NavigationContext": {
			"title": "nav.NavigationContext",
			"description": "Navigation information about an object with ancestors and children / links",
			"type": "object",
			"properties": {
				"current": {
					"$ref": "#/definitions/nav.NavigationItem"
				},
				"links": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.NavigationLink"
					}
				},
				"ancestors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.NavigationItem"
					}
				}
			}
		},
		"nav.NavigationItem": {
			"title": "nav.NavigationItem",
			"description": "A navigable object",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"isDeleted": {
					"type": "integer",
					"format": "int32"
				},
				"readAuth": {
					"$ref": "#/definitions/pf.Grant"
				}
			}
		},
		"nav.NavigationLink": {
			"title": "nav.NavigationLink",
			"description": "Contains information about a group of links to items (linked or children)",
			"type": "object",
			"properties": {
				"parent": {
					"$ref": "#/definitions/nav.NavigationItem"
				},
				"linktype": {
					"type": "string"
				},
				"forward": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.NavigationLinkedItem"
					}
				}
			}
		},
		"nav.NavigationLinkedItem": {
			"title": "nav.NavigationLinkedItem",
			"description": "An object that is contained in a group of links",
			"type": "object",
			"properties": {
				"linkId": {
					"type": "string"
				},
				"item": {
					"$ref": "#/definitions/nav.NavigationItem"
				}
			}
		},
		"nav.TypeInfo": {
			"title": "nav.TypeInfo",
			"description": "Provides structural information about types, their properties and URLs",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"module": {
					"$ref": "#/definitions/pf.Item"
				},
				"name": {
					"type": "string"
				},
				"url": {
					"type": "string"
				},
				"members": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.MemberInfo"
					}
				},
				"links": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.LinkTypeInfo"
					}
				},
				"features": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/nav.Feature"
					}
				},
				"showParent": {
					"type": "integer",
					"format": "int32"
				},
				"ambiguousParent": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pf.AttachmentDetails": {
			"title": "pf.AttachmentDetails",
			"description": "Contains basic information about an attachment, but no data",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"mimeType": {
					"type": "string"
				},
				"size": {
					"type": "integer",
					"format": "int64"
				},
				"timestamp": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"pf.AttachmentLink": {
			"title": "pf.AttachmentLink",
			"description": "A link between an object and an attachment",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"url": {
					"type": "string"
				},
				"mimeType": {
					"type": "string"
				},
				"size": {
					"type": "integer",
					"format": "int64"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"attachmentId": {
					"type": "string"
				},
				"timestamp": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"pf.Authorization": {
			"title": "pf.Authorization",
			"description": "Describes authorizations that are granted for an object",
			"type": "object",
			"properties": {
				"objectType": {
					"type": "string"
				},
				"objectId": {
					"type": "string"
				},
				"action": {
					"type": "string"
				},
				"transition": {
					"type": "string"
				},
				"grant": {
					"$ref": "#/definitions/pf.Grant"
				}
			}
		},
		"pf.Authorizations": {
			"title": "pf.Authorizations",
			"description": "Contains simple flags, which basic actions may be performed on an object",
			"type": "object",
			"properties": {
				"view": {
					"type": "integer",
					"format": "int32"
				},
				"change": {
					"type": "integer",
					"format": "int32"
				},
				"delete": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pf.Calendar": {
			"title": "pf.Calendar",
			"description": "A hierarchical calendar",
			"type": "object",
			"properties": {
				"layers": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.CalendarLayer"
					}
				}
			}
		},
		"pf.CalendarLayer": {
			"title": "pf.CalendarLayer",
			"description": "A calendar layer with the different ranges according to the layer's unit (i.e. January, February, ...)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"ranges": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.CalendarRange"
					}
				}
			}
		},
		"pf.CalendarRange": {
			"title": "pf.CalendarRange",
			"description": "A range of day defining a unit in a calendar layer",
			"type": "object",
			"properties": {
				"label": {
					"type": "string"
				},
				"first": {
					"type": "string",
					"format": "date"
				},
				"last": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pf.ConnectionInformationSeenFromClient": {
			"title": "pf.ConnectionInformationSeenFromClient",
			"description": "Describes the connection as seen from client side",
			"type": "object",
			"properties": {
				"websocketSessionId": {
					"type": "string"
				}
			}
		},
		"pf.ConnectionInformationSeenFromServer": {
			"title": "pf.ConnectionInformationSeenFromServer",
			"description": "Describes the connection as seen from client side",
			"type": "object",
			"properties": {
				"clientPublicIp": {
					"type": "string"
				},
				"proxy": {
					"type": "string"
				},
				"deviceType": {
					"type": "string"
				},
				"operatingSystem": {
					"type": "string"
				},
				"browser": {
					"type": "string"
				}
			}
		},
		"pf.Details": {
			"title": "pf.Details",
			"description": "Legacy details object",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				}
			}
		},
		"pf.DocumentLink": {
			"title": "pf.DocumentLink",
			"description": "A link between an object and a document",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"url": {
					"type": "string"
				},
				"mimeType": {
					"type": "string"
				},
				"size": {
					"type": "integer",
					"format": "int64"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pf.GanttItem": {
			"title": "pf.GanttItem",
			"description": "An object that may be shown within a gantt chart",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"ganttId": {
					"type": "string"
				},
				"beg": {
					"type": "string",
					"format": "date-time"
				},
				"end": {
					"type": "string",
					"format": "date-time"
				},
				"fixed": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pf.GenericObject": {
			"title": "pf.GenericObject",
			"description": "A generic object that is used by the client to store its own structured data objects like project portfolio scenario simulation data",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				}
			}
		},
		"pf.Grant": {
			"title": "pf.Grant",
			"description": "The result of an authorization check",
			"example": "DENY",
			"type": "string",
			"enum": [
				"DENY",
				"ALLOW"
			]
		},
		"pf.Item": {
			"title": "pf.Item",
			"description": "A generic item with basic identifying information and validity",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pf.ItemTimeline": {
			"title": "pf.ItemTimeline",
			"description": "A timeline containing items",
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.ItemTimelineEntry"
					}
				}
			}
		},
		"pf.ItemTimelineEntry": {
			"title": "pf.ItemTimelineEntry",
			"description": "A timeline entry containing an item",
			"type": "object",
			"properties": {
				"obj": {
					"$ref": "#/definitions/pf.Item"
				},
				"pointInTime": {
					"type": "string",
					"format": "date-time"
				},
				"user": {
					"$ref": "#/definitions/pf.Item"
				}
			}
		},
		"pf.ItemTimelineWithReference": {
			"title": "pf.ItemTimelineWithReference",
			"description": "A timeline containing references",
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.ItemTimelineEntry"
					}
				},
				"ref": {
					"$ref": "#/definitions/pf.Reference"
				}
			}
		},
		"pf.ItemTranslated": {
			"title": "pf.ItemTranslated",
			"description": "A generic item with basic identifying information in different languages and validity",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pf.ItemWithDeletedFlag": {
			"title": "pf.ItemWithDeletedFlag",
			"description": "An item with deleted flag",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"isDeleted": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pf.ItemWithProperties": {
			"title": "pf.ItemWithProperties",
			"description": "A generic item with basic identifying information and validity",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				}
			}
		},
		"pf.LicenseFeatures": {
			"title": "pf.LicenseFeatures",
			"description": "Contains all licensed features as string identifiers",
			"type": "object",
			"properties": {
				"features": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"pf.LinearFunction": {
			"title": "pf.LinearFunction",
			"description": "A mathematic linear function defined by y = ax * b",
			"type": "object",
			"properties": {
				"a": {
					"type": "number",
					"format": "double"
				},
				"b": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pf.Log": {
			"title": "pf.Log",
			"description": "A log entry with create and modified timestamps",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.NamedReference"
				}
			}
		},
		"pf.NamedReference": {
			"title": "pf.NamedReference",
			"description": "A reference to a certain object, identified by type and ID with it's name (to avoid further requests by client to show the reference)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"pf.PaletteColorItem": {
			"title": "pf.PaletteColorItem",
			"description": "A generic item with basic identifying information and validity (with palette color instead of arbitrary color)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pf.Property": {
			"title": "pf.Property",
			"description": "A dynamic property of an object",
			"type": "object",
			"properties": {
				"key": {
					"type": "string"
				},
				"label": {
					"type": "string"
				},
				"hint": {
					"type": "string"
				},
				"type": {
					"$ref": "#/definitions/pf.PropertyConstraint"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"pf.PropertyConstraint": {
			"title": "pf.PropertyConstraint",
			"description": "A specification of a dynamic object property",
			"type": "object",
			"properties": {
				"basetype": {
					"type": "string"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.PropertyConstraintAttribute"
					}
				}
			}
		},
		"pf.PropertyConstraintAttribute": {
			"title": "pf.PropertyConstraintAttribute",
			"description": "An attribute of a property specification",
			"type": "object",
			"properties": {
				"key": {
					"type": "string"
				},
				"value": {
					"type": "string"
				}
			}
		},
		"pf.PropertyDefinition": {
			"title": "pf.PropertyDefinition",
			"description": "A definition of dynamic a property that belongs to an object type",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"objectType": {
					"type": "string"
				},
				"sortIndex": {
					"type": "integer",
					"format": "int32"
				},
				"label": {
					"type": "string"
				},
				"identifier": {
					"type": "string"
				},
				"hint": {
					"type": "string"
				},
				"constraint": {
					"$ref": "#/definitions/pf.PropertyConstraint"
				}
			}
		},
		"pf.PropertyDefinitionTranslated": {
			"title": "pf.PropertyDefinitionTranslated",
			"description": "A definition of dynamic a property that belongs to an object type (with translations)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"objectType": {
					"type": "string"
				},
				"sortIndex": {
					"type": "integer",
					"format": "int32"
				},
				"label": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"identifier": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"hint": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"constraint": {
					"type": "string"
				}
			}
		},
		"pf.Reference": {
			"title": "pf.Reference",
			"description": "A reference to a certain object, identified by type and ID",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				}
			}
		},
		"pf.Relation": {
			"title": "pf.Relation",
			"description": "Describes a relation between two objects",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"relationType": {
					"type": "string"
				},
				"explicit": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"source": {
					"$ref": "#/definitions/pf.Reference"
				},
				"target": {
					"$ref": "#/definitions/pf.Reference"
				}
			}
		},
		"pf.RelationType": {
			"title": "pf.RelationType",
			"description": "Describes a relation type which defines the rules of a relation",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"nameForward": {
					"type": "string"
				},
				"nameBackward": {
					"type": "string"
				}
			}
		},
		"pf.RelationTypeWithConstraints": {
			"title": "pf.RelationTypeWithConstraints",
			"description": "Describes a relation type which defines the rules of a relation including some rules",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"nameForward": {
					"type": "string"
				},
				"nameBackward": {
					"type": "string"
				},
				"explicit": {
					"type": "integer",
					"format": "int32"
				},
				"sourceTypes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"targetTypes": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"sourcesUrl": {
					"type": "string"
				},
				"targetsUrl": {
					"type": "string"
				}
			}
		},
		"pf.Software": {
			"title": "pf.Software",
			"description": "Contains basic information about software",
			"type": "object",
			"properties": {
				"name": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"pf.SubObject": {
			"title": "pf.SubObject",
			"description": "Contains a sub object which is part of any other object but has its own access control rights",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				}
			}
		},
		"pf.Tenant": {
			"title": "pf.Tenant",
			"description": "A shot description of the current tenant, only publicly available information that can be shown on login screen",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"alias": {
					"type": "string"
				},
				"company": {
					"type": "string"
				}
			}
		},
		"pf.Timeline": {
			"title": "pf.Timeline",
			"description": "A timeline that contains a number of events per unit",
			"type": "object",
			"properties": {
				"slots": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.TimelineSlot"
					}
				}
			}
		},
		"pf.TimelineSlot": {
			"title": "pf.TimelineSlot",
			"description": "A slot in a timeline, containing the number of events from the start of this slot until the start of the next slot",
			"type": "object",
			"properties": {
				"at": {
					"type": "string",
					"format": "date-time"
				},
				"count": {
					"type": "integer",
					"format": "int64"
				}
			}
		},
		"pf.Translation": {
			"title": "pf.Translation",
			"description": "Contains a string in a certain language",
			"type": "object",
			"properties": {
				"code": {
					"type": "string"
				},
				"text": {
					"type": "string"
				}
			}
		},
		"pf.Unit": {
			"title": "pf.Unit",
			"description": "Information about a unit (time, length, volume, ...)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"abbr": {
					"type": "string"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"pf.UnitFactor": {
			"title": "pf.UnitFactor",
			"description": "Describes the factor that can be applied to values to convert them between different units",
			"type": "object",
			"properties": {
				"unit": {
					"type": "string"
				},
				"factor": {
					"type": "string"
				}
			}
		},
		"pf.UnitPreference": {
			"title": "pf.UnitPreference",
			"description": "Describes the preferred units (order) in a system",
			"type": "object",
			"properties": {
				"preferredUnits": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"pf.UserAgent": {
			"title": "pf.UserAgent",
			"description": "Contains information about a user agent that was detected",
			"type": "object",
			"properties": {
				"browser": {
					"$ref": "#/definitions/pf.Software"
				},
				"os": {
					"$ref": "#/definitions/pf.Software"
				},
				"device": {
					"type": "string"
				},
				"languages": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"userAgentString": {
					"type": "string"
				}
			}
		},
		"pf.ValueWithUnit": {
			"title": "pf.ValueWithUnit",
			"description": "Contains a floating point value with a unit",
			"type": "object",
			"properties": {
				"value": {
					"type": "number",
					"format": "double"
				},
				"unit": {
					"$ref": "#/definitions/pf.Unit"
				}
			}
		},
		"pf.VersionedDetails": {
			"title": "pf.VersionedDetails",
			"description": "Contains legacy details object with version information",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pf.VersionedItem": {
			"title": "pf.VersionedItem",
			"description": "A generic item with basic identifying information and validity",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pf.VersionedItemTranslated": {
			"title": "pf.VersionedItemTranslated",
			"description": "A generic item with basic identifying information in different languages and validity",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pf.VersionedItemWithProperties": {
			"title": "pf.VersionedItemWithProperties",
			"description": "A generic item with basic identifying information and validity",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				}
			}
		},
		"pf.VersionedReference": {
			"title": "pf.VersionedReference",
			"description": "A reference to a certain object, identified by type and ID",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pi.ProjectItem": {
			"title": "pi.ProjectItem",
			"description": "Describes a project item like a TODO",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"state": {
					"$ref": "#/definitions/lcy.LifecycleState"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"color": {
					"type": "string"
				},
				"marker": {
					"type": "string"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				}
			}
		},
		"pi.ProjectItemSummary": {
			"title": "pi.ProjectItemSummary",
			"description": "A project item with additional, summarizing information",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"state": {
					"$ref": "#/definitions/lcy.LifecycleState"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"color": {
					"type": "string"
				},
				"marker": {
					"type": "string"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"relations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Relation"
					}
				},
				"lifecycleHistory": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/lcy.LifecycleHistory"
					}
				},
				"possibleLifecycleTransitions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/lcy.LifecycleTransition"
					}
				}
			}
		},
		"pi.ProjectItemType": {
			"title": "pi.ProjectItemType",
			"description": "Describes some type of project items",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"markerEnumType": {
					"type": "string"
				}
			}
		},
		"pm.ConstraintRespectLevel": {
			"title": "pm.ConstraintRespectLevel",
			"description": "Describes the behaviour when a constraint should be violated in a project planning",
			"example": "IGNORE",
			"type": "string",
			"enum": [
				"IGNORE",
				"WARN",
				"ENFORCE"
			]
		},
		"pm.ExplicitProjectConstraintType": {
			"title": "pm.ExplicitProjectConstraintType",
			"description": "Distinguishes different types of explicit project constraints",
			"example": "MANUAL",
			"type": "string",
			"enum": [
				"MANUAL",
				"SPLITTED"
			]
		},
		"pm.IndicatorClassificationScheme": {
			"title": "pm.IndicatorClassificationScheme",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"calculationType": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"values": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorClassificationSchemeValue"
					}
				}
			}
		},
		"pm.IndicatorClassificationSchemeIntl": {
			"title": "pm.IndicatorClassificationSchemeIntl",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"calculationType": {
					"type": "string"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"values": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorClassificationSchemeValueIntl"
					}
				}
			}
		},
		"pm.IndicatorClassificationSchemeValue": {
			"title": "pm.IndicatorClassificationSchemeValue",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"valueStart": {
					"type": "number",
					"format": "double"
				},
				"rating": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorClassificationSchemeValueIntl": {
			"title": "pm.IndicatorClassificationSchemeValueIntl",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"valueStart": {
					"type": "number",
					"format": "double"
				},
				"rating": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorCollection": {
			"title": "pm.IndicatorCollection",
			"description": "The indicators in a project report",
			"type": "object",
			"properties": {
				"dimensions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorDimension"
					}
				},
				"leading": {
					"$ref": "#/definitions/pm.IndicatorDimension"
				},
				"riskSum": {
					"type": "number",
					"format": "double"
				},
				"riskClassSum": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorDetail": {
			"title": "pm.IndicatorDetail",
			"description": "A single indicator in a project report",
			"type": "object",
			"properties": {
				"selection": {
					"$ref": "#/definitions/pm.IndicatorDetailSelection"
				},
				"actualValueCalculated": {
					"type": "string"
				},
				"actualValueManual": {
					"type": "string"
				},
				"remainingValueCalculated": {
					"type": "string"
				},
				"remainingValueManual": {
					"type": "string"
				},
				"forecastValueCalculated": {
					"type": "string"
				},
				"forecastValueManual": {
					"type": "string"
				},
				"statusClassCalculated": {
					"$ref": "#/definitions/pf.Item"
				},
				"statusClass": {
					"$ref": "#/definitions/pf.Item"
				},
				"trendClassCalculated": {
					"$ref": "#/definitions/pf.Item"
				},
				"trendClass": {
					"$ref": "#/definitions/pf.Item"
				},
				"remark": {
					"type": "string"
				}
			}
		},
		"pm.IndicatorDetailDef": {
			"title": "pm.IndicatorDetailDef",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"projectReportTypeId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"valueType": {
					"$ref": "#/definitions/pf.PropertyConstraint"
				},
				"inputActual": {
					"type": "string"
				},
				"inputRemaining": {
					"type": "string"
				},
				"inputForecast": {
					"type": "string"
				},
				"statusClassId": {
					"type": "string"
				},
				"trendClassId": {
					"type": "string"
				},
				"dimension": {
					"type": "string"
				},
				"semantics": {
					"type": "string"
				},
				"accumulation": {
					"type": "string"
				},
				"projectManagementMethodPhase": {
					"type": "string"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorDetailDefIntl": {
			"title": "pm.IndicatorDetailDefIntl",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"projectReportTypeId": {
					"type": "string"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"aggregationRule": {
					"type": "string"
				},
				"statusClassId": {
					"type": "string"
				},
				"trendClassId": {
					"type": "string"
				},
				"dimension": {
					"type": "string"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorDetailSelection": {
			"title": "pm.IndicatorDetailSelection",
			"description": "Contains the indicator type and the targets defined in the project itself for an indicator on a project report",
			"type": "object",
			"properties": {
				"typeId": {
					"type": "string"
				},
				"targetValue": {
					"type": "string"
				},
				"showValues": {
					"type": "integer",
					"format": "int32"
				},
				"projectSpecificName": {
					"type": "string"
				},
				"remark": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.IndicatorDetailSelectionHistoric": {
			"title": "pm.IndicatorDetailSelectionHistoric",
			"type": "object",
			"properties": {
				"at": {
					"type": "string",
					"format": "date-time"
				},
				"obj": {
					"$ref": "#/definitions/pm.IndicatorDetailSelection"
				}
			}
		},
		"pm.IndicatorDetailSelectionHistory": {
			"title": "pm.IndicatorDetailSelectionHistory",
			"type": "object",
			"properties": {
				"history": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorDetailSelectionHistoric"
					}
				}
			}
		},
		"pm.IndicatorDimension": {
			"title": "pm.IndicatorDimension",
			"description": "Describes a group of indicators forming one dimension of a project report (i.e. costs, timeline, ...)",
			"type": "object",
			"properties": {
				"selection": {
					"$ref": "#/definitions/pm.IndicatorDimensionSelection"
				},
				"indicators": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorDetail"
					}
				},
				"total": {
					"$ref": "#/definitions/pm.IndicatorDetail"
				},
				"targetTotal": {
					"type": "string"
				},
				"riskEstimation": {
					"$ref": "#/definitions/pm.IndicatorRiskEstimation"
				}
			}
		},
		"pm.IndicatorDimensionDef": {
			"title": "pm.IndicatorDimensionDef",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"projectReportTypeId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"statusClassId": {
					"type": "string"
				},
				"trendClassId": {
					"type": "string"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorDimensionDefIntl": {
			"title": "pm.IndicatorDimensionDefIntl",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"projectReportTypeId": {
					"type": "string"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"statusClassId": {
					"type": "string"
				},
				"trendClassId": {
					"type": "string"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.IndicatorDimensionSelection": {
			"title": "pm.IndicatorDimensionSelection",
			"description": "Contains the guidelines defined in the project itself for an indicator dimension of a project report",
			"type": "object",
			"properties": {
				"dimension": {
					"type": "string"
				},
				"showValues": {
					"type": "integer",
					"format": "int32"
				},
				"showRiskEstimation": {
					"type": "integer",
					"format": "int32"
				},
				"isLeading": {
					"type": "integer",
					"format": "int32"
				},
				"remark": {
					"type": "string"
				},
				"details": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorDetailSelection"
					}
				},
				"isReportExport": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.IndicatorRiskEstimation": {
			"title": "pm.IndicatorRiskEstimation",
			"description": "Contains the manual risk rating of all risks belonging to a certain dimension on a project report",
			"type": "object",
			"properties": {
				"occurrenceProbability": {
					"type": "number",
					"format": "double"
				},
				"occurrenceProbabilityClassification": {
					"type": "string"
				},
				"extentOfLoss": {
					"type": "number",
					"format": "double"
				},
				"extentOfLossClassification": {
					"type": "string"
				},
				"riskRating": {
					"type": "number",
					"format": "double"
				},
				"riskRatingClassification": {
					"type": "string"
				},
				"remark": {
					"type": "string"
				}
			}
		},
		"pm.IndicatorSelections": {
			"title": "pm.IndicatorSelections",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"dimensions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.IndicatorDimensionSelection"
					}
				}
			}
		},
		"pm.MacroAllocation": {
			"title": "pm.MacroAllocation",
			"description": "JSON serializable class for allocations of resources to phases in macro planning.",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"projectId": {
					"type": "string"
				},
				"scenarioId": {
					"type": "string"
				},
				"phaseId": {
					"type": "string"
				},
				"resourceId": {
					"type": "string"
				},
				"resourceType": {
					"type": "string"
				},
				"duration": {
					"type": "string"
				},
				"amount": {
					"type": "number",
					"format": "double"
				},
				"amountUnit": {
					"type": "string"
				},
				"amountType": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.NamedReference"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.MovePattern": {
			"title": "pm.MovePattern",
			"description": "A set of linear functions describing the movement of any gantt object in relation to the movement of another gantt object",
			"type": "object",
			"properties": {
				"objectId": {
					"type": "string"
				},
				"defaultMove": {
					"$ref": "#/definitions/pf.LinearFunction"
				},
				"segments": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.MovePatternSegment"
					}
				}
			}
		},
		"pm.MovePatternSegment": {
			"title": "pm.MovePatternSegment",
			"description": "A linear function describing the movement of any gantt object in relation to the movement of another gantt object within a certain boundary",
			"type": "object",
			"properties": {
				"a": {
					"type": "number",
					"format": "double"
				},
				"b": {
					"type": "number",
					"format": "double"
				},
				"minX": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.Project": {
			"title": "pm.Project",
			"description": "Describes a project",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"status": {
					"type": "string"
				},
				"portfolios": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Item"
					}
				},
				"guideline": {
					"$ref": "#/definitions/pm.ProjectGuideline"
				},
				"classification": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/cls.Classification"
					}
				}
			}
		},
		"pm.ProjectConstraint": {
			"title": "pm.ProjectConstraint",
			"description": "Describes a constraint / dependency between different milestones",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"constraintType": {
					"$ref": "#/definitions/pm.ExplicitProjectConstraintType"
				},
				"predecessorMilestoneId": {
					"type": "string"
				},
				"successorMilestoneId": {
					"type": "string"
				},
				"minDistance": {
					"type": "integer",
					"format": "int32"
				},
				"maxDistance": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.ProjectGuideline": {
			"title": "pm.ProjectGuideline",
			"description": "Describes the rules that should be followed or not when planning a project",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"subPhasePartOfSuperPhase": {
					"$ref": "#/definitions/pm.ConstraintRespectLevel"
				},
				"respectDependencies": {
					"$ref": "#/definitions/pm.ConstraintRespectLevel"
				},
				"respectCostsRules": {
					"$ref": "#/definitions/pm.ConstraintRespectLevel"
				},
				"respectMacroAllocationRules": {
					"$ref": "#/definitions/pm.ConstraintRespectLevel"
				}
			}
		},
		"pm.ProjectManagementMethod": {
			"title": "pm.ProjectManagementMethod",
			"description": "Describes a project management method in the user's language",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pm.ProjectManagementMethodPhase": {
			"title": "pm.ProjectManagementMethodPhase",
			"description": "Describes a project management method phase in the users's language",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.ProjectManagementMethodPhaseLifecycleAssignment": {
			"title": "pm.ProjectManagementMethodPhaseLifecycleAssignment",
			"description": "Describes an assignment between a lifecycle state and a project management method phase",
			"type": "object",
			"properties": {
				"phaseId": {
					"type": "string"
				},
				"lifecycleStateId": {
					"type": "string"
				}
			}
		},
		"pm.ProjectManagementMethodPhaseTimeline": {
			"title": "pm.ProjectManagementMethodPhaseTimeline",
			"description": "Describes a phase with its planned and effective finish related to a project",
			"type": "object",
			"properties": {
				"managementMethodPhase": {
					"$ref": "#/definitions/pf.Item"
				},
				"plannedFinish": {
					"type": "string",
					"format": "date"
				},
				"finished": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"pm.ProjectManagementMethodPhaseTranslated": {
			"title": "pm.ProjectManagementMethodPhaseTranslated",
			"description": "Describes a project management method phase in different languages",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.ProjectManagementMethodTimeline": {
			"title": "pm.ProjectManagementMethodTimeline",
			"description": "Describes a project management method with time information in relation to a project",
			"type": "object",
			"properties": {
				"managementMethod": {
					"$ref": "#/definitions/pf.Item"
				},
				"plannedStart": {
					"type": "string",
					"format": "date"
				},
				"started": {
					"type": "string",
					"format": "date-time"
				},
				"phases": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.ProjectManagementMethodPhaseTimeline"
					}
				},
				"currentPhase": {
					"type": "string"
				}
			}
		},
		"pm.ProjectManagementMethodTranslated": {
			"title": "pm.ProjectManagementMethodTranslated",
			"description": "Describes a project management method in different languages",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"iconRef": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Translation"
					}
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"pm.ProjectPortfolio": {
			"title": "pm.ProjectPortfolio",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"parentPortfolioId": {
					"type": "string"
				}
			}
		},
		"pm.ProjectPortfolioMilestone": {
			"title": "pm.ProjectPortfolioMilestone",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"projectPortfolioId": {
					"type": "string"
				},
				"pointInTime": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"pm.ProjectReport": {
			"title": "pm.ProjectReport",
			"description": "A project report",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"projectId": {
					"type": "string"
				},
				"indicators": {
					"$ref": "#/definitions/pm.IndicatorCollection"
				},
				"risks": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.ProjectRisk"
					}
				},
				"currency": {
					"type": "string"
				}
			}
		},
		"pm.ProjectReportInterval": {
			"title": "pm.ProjectReportInterval",
			"description": "The schedule / interval for a project report",
			"type": "object",
			"properties": {
				"unit": {
					"$ref": "#/definitions/pm.ProjectReportIntervalUnit"
				},
				"amount": {
					"type": "integer",
					"format": "int32"
				},
				"offset": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.ProjectReportIntervalUnit": {
			"title": "pm.ProjectReportIntervalUnit",
			"description": "The different units that may apply to a project report's interval",
			"example": "DAYS",
			"type": "string",
			"enum": [
				"DAYS",
				"WEEKS",
				"MONTHS",
				"YEARS"
			]
		},
		"pm.ProjectReportType": {
			"title": "pm.ProjectReportType",
			"description": "A project report type",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"interval": {
					"$ref": "#/definitions/pm.ProjectReportInterval"
				},
				"autoCreate": {
					"type": "integer",
					"format": "int32"
				},
				"hasValidity": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.ProjectScenario": {
			"title": "pm.ProjectScenario",
			"description": "Describes a project scenario",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"projectId": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"owner": {
					"$ref": "#/definitions/pf.Item"
				}
			}
		},
		"pm.ProjectSummary": {
			"title": "pm.ProjectSummary",
			"description": "A summary containing all relevant information belonging to a project",
			"type": "object",
			"properties": {
				"project": {
					"$ref": "#/definitions/pm.Project"
				},
				"subObjects": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.SubObject"
					}
				},
				"activeScenario": {
					"$ref": "#/definitions/pm.ProjectScenario"
				},
				"mainPhase": {
					"$ref": "#/definitions/pm.ProjectWorkItem"
				},
				"accumulatedValues": {
					"$ref": "#/definitions/pm.ProjectWorkItemAccumulatedValues"
				},
				"costsBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"costsPlanned": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"costsForecast": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"relations": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Relation"
					}
				},
				"managementMethod": {
					"$ref": "#/definitions/pf.Item"
				},
				"managementMethodPhase": {
					"$ref": "#/definitions/pf.Item"
				},
				"thirdPartyReferences": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/tdp.ThirdPartyReference"
					}
				},
				"latestReports": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.ProjectReport"
					}
				}
			}
		},
		"pm.ProjectWithReports": {
			"title": "pm.ProjectWithReports",
			"description": "Project information in combination with the latest report",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"reports": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.ProjectReport"
					}
				}
			}
		},
		"pm.ProjectWorkItem": {
			"title": "pm.ProjectWorkItem",
			"description": "Describes a project work item (phase / milestone / folder)",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"phaseType": {
					"$ref": "#/definitions/pm.ProjectWorkItemType"
				},
				"projectId": {
					"type": "string"
				},
				"scenarioId": {
					"type": "string"
				},
				"parentPhaseId": {
					"type": "string"
				},
				"startId": {
					"type": "string"
				},
				"endId": {
					"type": "string"
				},
				"sortIndex": {
					"type": "number",
					"format": "double"
				},
				"timeBudget": {
					"type": "string"
				},
				"costsBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"planned": {
					"type": "string"
				},
				"beg": {
					"type": "string",
					"format": "date-time"
				},
				"end": {
					"type": "string",
					"format": "date-time"
				},
				"fixed": {
					"type": "integer",
					"format": "int32"
				},
				"progress": {
					"type": "integer",
					"format": "int32"
				},
				"autoProgress": {
					"type": "integer",
					"format": "int32"
				},
				"projectCostsPositions": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.NamedReference"
					}
				},
				"owner": {
					"$ref": "#/definitions/pf.ItemWithDeletedFlag"
				},
				"requiredSkill": {
					"$ref": "#/definitions/pf.ItemWithDeletedFlag"
				},
				"color": {
					"type": "string"
				},
				"projectManagementMethodPhaseId": {
					"type": "string"
				},
				"dependencies": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.ProjectWorkItemConstraint"
					}
				}
			}
		},
		"pm.ProjectWorkItemAccumulatedValues": {
			"title": "pm.ProjectWorkItemAccumulatedValues",
			"description": "Contains accumulated values (costs, effort, planning errors) for a project workitem",
			"type": "object",
			"properties": {
				"projectWorkItemId": {
					"type": "string"
				},
				"childrenCount": {
					"type": "integer",
					"format": "int32"
				},
				"childrenCountAccumulated": {
					"type": "integer",
					"format": "int32"
				},
				"costsBudget": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"costsBudgetAccumulated": {
					"$ref": "#/definitions/fco.CurrencyAmount"
				},
				"costs": {
					"$ref": "#/definitions/fco.CostsForecastsGroups"
				},
				"costsAccumulated": {
					"$ref": "#/definitions/fco.CostsForecastsGroups"
				},
				"resourceAllocations": {
					"type": "string"
				},
				"resourceAllocationsAccumulated": {
					"type": "string"
				},
				"resourceActuals": {
					"type": "string"
				},
				"resourceActualsAccumulated": {
					"type": "string"
				},
				"timeBudgetAccumulated": {
					"type": "string"
				},
				"timePlannedAccumulated": {
					"type": "string"
				},
				"timeRemainingAccumulated": {
					"type": "string"
				},
				"errors": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"errorsAccumulated": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"progress": {
					"type": "number",
					"format": "double"
				},
				"progressAccumulated": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.ProjectWorkItemConstraint": {
			"title": "pm.ProjectWorkItemConstraint",
			"description": "Describes a dependency between two project phases",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"fromPhaseId": {
					"type": "string"
				},
				"toPhaseId": {
					"type": "string"
				},
				"dependencyType": {
					"$ref": "#/definitions/pm.ProjectWorkItemConstraintType"
				},
				"minDistance": {
					"type": "integer",
					"format": "int32"
				},
				"maxDistance": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"pm.ProjectWorkItemConstraintType": {
			"title": "pm.ProjectWorkItemConstraintType",
			"description": "Describes the kind of work item dependency (i.e. the points where the dependency connects to the phases)",
			"example": "START_START",
			"type": "string",
			"enum": [
				"START_START",
				"START_END",
				"END_START",
				"END_END",
				"SPLITTED"
			]
		},
		"pm.ProjectWorkItemType": {
			"title": "pm.ProjectWorkItemType",
			"description": "Describes the kind of phase of a project plan",
			"example": "PORTFOLIO_MILESTONE",
			"type": "string",
			"enum": [
				"PORTFOLIO_MILESTONE",
				"PORTFOLIO_MILESTONE_FOLDER",
				"PROJECT_FOLDER",
				"PROJECT_MILESTONE",
				"PROJECT_PHASE"
			]
		},
		"pm.ReferenceFactor": {
			"title": "pm.ReferenceFactor",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"factor": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"pm.ShiftPattern": {
			"title": "pm.ShiftPattern",
			"type": "object",
			"properties": {
				"shift": {
					"$ref": "#/definitions/res.ResourceShift"
				},
				"pattern": {
					"type": "array",
					"items": {
						"type": "integer",
						"format": "int32"
					}
				}
			}
		},
		"pm.ShiftPlan": {
			"title": "pm.ShiftPlan",
			"type": "object",
			"properties": {
				"shifts": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pm.ShiftPattern"
					}
				}
			}
		},
		"pm.WorkItem": {
			"title": "pm.WorkItem",
			"description": "Describes a work item with basic information",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"duration": {
					"type": "string"
				},
				"start": {
					"type": "string",
					"format": "date-time"
				},
				"finish": {
					"type": "string",
					"format": "date-time"
				}
			}
		},
		"res.AbsenceType": {
			"title": "res.AbsenceType",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"availabilityPercentage": {
					"type": "integer",
					"format": "int32"
				},
				"presencePercentage": {
					"type": "integer",
					"format": "int32"
				},
				"category": {
					"type": "integer",
					"format": "int32"
				}
			}
		},
		"res.Availability": {
			"title": "res.Availability",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"inheritFromParent": {
					"type": "integer",
					"format": "int32"
				},
				"validAfter": {
					"type": "string",
					"format": "date"
				},
				"holidayLocaleId": {
					"type": "string"
				},
				"models": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/res.Model"
					}
				},
				"basicLoadPercent": {
					"type": "integer",
					"format": "int32"
				},
				"costPerHour": {
					"type": "number",
					"format": "double"
				},
				"costCurrency": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"ftePercent": {
					"type": "integer",
					"format": "int32"
				},
				"standardAvails": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"res.Holiday": {
			"title": "res.Holiday",
			"description": "Describes a holiday for resources (assigned to a date and a shift)",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"date": {
					"type": "string",
					"format": "date"
				},
				"shiftId": {
					"type": "string"
				},
				"name": {
					"type": "string"
				}
			}
		},
		"res.ItemWithAncestors": {
			"title": "res.ItemWithAncestors",
			"description": "JSON serializable class for detailed attributes of a navigable item.",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"ancestors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/res.ReferenceWithLinkInfo"
					}
				}
			}
		},
		"res.Model": {
			"title": "res.Model",
			"type": "object",
			"properties": {
				"shift": {
					"$ref": "#/definitions/res.ResourceShift"
				},
				"presencePerDay": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/res.Presence"
					}
				}
			}
		},
		"res.Presence": {
			"title": "res.Presence",
			"type": "object",
			"properties": {
				"presence": {
					"type": "integer",
					"format": "int32"
				},
				"duration": {
					"type": "string"
				}
			}
		},
		"res.ReferenceWithLinkInfo": {
			"title": "res.ReferenceWithLinkInfo",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"linkType": {
					"type": "string"
				},
				"linkId": {
					"type": "string"
				},
				"linkValidityStart": {
					"type": "string",
					"format": "date"
				},
				"linkValidityUntil": {
					"type": "string",
					"format": "date"
				}
			}
		},
		"res.Resource": {
			"title": "res.Resource",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityEnd": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"eMail": {
					"type": "string"
				}
			}
		},
		"res.ResourceAvailability": {
			"title": "res.ResourceAvailability",
			"type": "object",
			"properties": {
				"resource": {
					"$ref": "#/definitions/pf.Item"
				},
				"availability": {
					"type": "string"
				}
			}
		},
		"res.ResourceGroup": {
			"title": "res.ResourceGroup",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"imageUrl": {
					"type": "string"
				},
				"rootResource": {
					"$ref": "#/definitions/pf.Reference"
				}
			}
		},
		"res.ResourceGroupStandardWorktime": {
			"title": "res.ResourceGroupStandardWorktime",
			"description": "Describes the standard worktime of a resource group",
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"standardWorktime": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"res.ResourceKind": {
			"title": "res.ResourceKind",
			"example": "RES-KIND-ABSTRACT",
			"type": "string",
			"enum": [
				"RES-KIND-ABSTRACT",
				"RES-KIND-GROUP",
				"RES-KIND-INFRASTRUCTURE",
				"RES-KIND-PERSON"
			]
		},
		"res.ResourceShift": {
			"title": "res.ResourceShift",
			"description": "Defines a worktime shift for a resource.",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"imageUrl": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"duration": {
					"type": "string"
				},
				"begTime": {
					"type": "string"
				},
				"endTime": {
					"type": "string"
				}
			}
		},
		"res.ResourceType": {
			"title": "res.ResourceType",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"resourceGroupeId": {
					"type": "string"
				},
				"costsTypeId": {
					"type": "string"
				},
				"templateId": {
					"type": "string"
				},
				"resourceKind": {
					"$ref": "#/definitions/res.ResourceKind"
				}
			}
		},
		"rsk.ProjectRisk": {
			"title": "rsk.ProjectRisk",
			"description": "Describes a project risk without history",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"rating": {
					"$ref": "#/definitions/rsk.RiskRating"
				},
				"projectId": {
					"type": "string"
				},
				"loss": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"riskBudget": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"dimension": {
					"type": "string"
				}
			}
		},
		"rsk.ProjectRiskWithHistory": {
			"title": "rsk.ProjectRiskWithHistory",
			"description": "Describes a project risk with history",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"rating": {
					"$ref": "#/definitions/rsk.RiskRating"
				},
				"history": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.RiskRatingHistoric"
					}
				},
				"projectId": {
					"type": "string"
				},
				"loss": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"riskBudget": {
					"$ref": "#/definitions/fco.ConvertedCurrencyAmount"
				},
				"dimension": {
					"type": "string"
				}
			}
		},
		"rsk.Risk": {
			"title": "rsk.Risk",
			"description": "Describes a risk with rating but without historic data",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"rating": {
					"$ref": "#/definitions/rsk.RiskRating"
				}
			}
		},
		"rsk.RiskClassification": {
			"title": "rsk.RiskClassification",
			"description": "A classification for a risk rating, occurrence probability or extent of loss",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"name": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"imageUrl": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"limit": {
					"type": "number",
					"format": "double"
				}
			}
		},
		"rsk.RiskMatrixAssignment": {
			"title": "rsk.RiskMatrixAssignment",
			"description": "The calculated classifications of a risk according to the matrix definition",
			"type": "object",
			"properties": {
				"occurrenceProbabilityClassification": {
					"type": "string"
				},
				"extentOfLossClassification": {
					"type": "string"
				},
				"riskRatingClassification": {
					"type": "string"
				}
			}
		},
		"rsk.RiskMatrixDefinition": {
			"title": "rsk.RiskMatrixDefinition",
			"description": "Contains the definition of a risk matrix (different classes for the dimensions)",
			"type": "object",
			"properties": {
				"occurrenceProbabilityClassifications": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.RiskClassification"
					}
				},
				"extentOfLossClassifications": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.RiskClassification"
					}
				},
				"riskRatingClassifications": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.RiskClassification"
					}
				},
				"fields": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.RiskMatrixAssignment"
					}
				}
			}
		},
		"rsk.RiskRating": {
			"title": "rsk.RiskRating",
			"description": "Describes how a risk is rated",
			"type": "object",
			"properties": {
				"occurrenceProbability": {
					"type": "number",
					"format": "double"
				},
				"occurrenceProbabilityClassification": {
					"type": "string"
				},
				"extentOfLoss": {
					"type": "number",
					"format": "double"
				},
				"extentOfLossClassification": {
					"type": "string"
				},
				"riskRating": {
					"type": "number",
					"format": "double"
				},
				"riskRatingClassification": {
					"type": "string"
				}
			}
		},
		"rsk.RiskRatingHistoric": {
			"title": "rsk.RiskRatingHistoric",
			"description": "A historic value of a risk rating",
			"type": "object",
			"properties": {
				"at": {
					"type": "string",
					"format": "date-time"
				},
				"obj": {
					"$ref": "#/definitions/rsk.RiskRating"
				}
			}
		},
		"rsk.RiskWithHistory": {
			"title": "rsk.RiskWithHistory",
			"description": "Describes a risk with rating including historic data",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"createdAt": {
					"type": "string",
					"format": "date-time"
				},
				"createdBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"modifiedAt": {
					"type": "string",
					"format": "date-time"
				},
				"modifiedBy": {
					"$ref": "#/definitions/pf.Item"
				},
				"version": {
					"type": "string"
				},
				"historic": {
					"type": "integer",
					"format": "int32"
				},
				"name": {
					"type": "string"
				},
				"code": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"iconRef": {
					"type": "string"
				},
				"color": {
					"type": "string"
				},
				"validityStart": {
					"type": "string",
					"format": "date"
				},
				"validityUntil": {
					"type": "string",
					"format": "date"
				},
				"properties": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/pf.Property"
					}
				},
				"rating": {
					"$ref": "#/definitions/rsk.RiskRating"
				},
				"history": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/rsk.RiskRatingHistoric"
					}
				}
			}
		},
		"tdp.ThirdPartyReference": {
			"title": "tdp.ThirdPartyReference",
			"description": "Describes a relation between a PQFORCE object and any object in a third party system including some properties of the third party's object",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"foreignKey": {
					"type": "string"
				},
				"pqforceId": {
					"type": "string"
				},
				"foreignName": {
					"type": "string"
				},
				"foreignCode": {
					"type": "string"
				},
				"foreignDescription": {
					"type": "string"
				},
				"foreignImageUrl": {
					"type": "string"
				}
			}
		},
		"tdp.ThirdPartyReferenceAssignment": {
			"title": "tdp.ThirdPartyReferenceAssignment",
			"description": "Defines a relation between a PQFORCE object and any object in a third party system",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"foreignKey": {
					"type": "string"
				},
				"pqforceId": {
					"type": "string"
				}
			}
		},
		"tdp.ThirdPartyReferenceType": {
			"title": "tdp.ThirdPartyReferenceType",
			"description": "Describes which type of PQFORCE objects is linked to third party objects",
			"type": "object",
			"properties": {
				"type": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"typeId": {
					"type": "string"
				},
				"maxCount": {
					"type": "integer",
					"format": "int32"
				}
			}
		}
	},
	"security": [],
	"tags": []
}